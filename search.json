[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Actionable Data with Shiny Dashboards",
    "section": "",
    "text": "About this Workshop\nThe Shiny R package is over ten years old and is a popular tool to create immersive, web-based content. Although many water quality scientists and professionals have experience with R, expertise in dashboards is uncommon. This workshop will introduce the fundamentals of building Shiny dashboards in R using real-world examples with hands-on coding exercises. The benefits of developing Shiny dashboards and their potential applications to improve research, monitoring, and management will be discussed. Special attention will be on the merits of open source software for creating reproducible and transparent dashboard workflows, including addressing common deployment and IT hurdles. Attendees are strongly encouraged to bring their own laptops to follow along with the workshop exercises.\nAnyone interested in learning how to expand existing R skills for dashboard development will benefit from this workshop. This includes student, early career, and advanced professionals from any employment sector and field of expertise.",
    "crumbs": [
      "About this Workshop"
    ]
  },
  {
    "objectID": "index.html#agenda",
    "href": "index.html#agenda",
    "title": "Actionable Data with Shiny Dashboards",
    "section": "Agenda",
    "text": "Agenda\n\n\n\n\n\nTime\nTopic\n\n\n\n\n10:30\nIntroduction\n\n\n10:45\nFundamentals\n\n\n11:30\nDeployment and IT Hurdles\n\n\n12:00\nadjourn",
    "crumbs": [
      "About this Workshop"
    ]
  },
  {
    "objectID": "index.html#important-links",
    "href": "index.html#important-links",
    "title": "Actionable Data with Shiny Dashboards",
    "section": "Important links",
    "text": "Important links\n\nWorkshop Website: link\nLive Chat: link\nPosit Cloud: link\nPost-workshop survey: link",
    "crumbs": [
      "About this Workshop"
    ]
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "Actionable Data with Shiny Dashboards",
    "section": "Setup",
    "text": "Setup\nPlease visit the setup page for instructions on participating during this workshop. You can use an RStudio project on Posit Cloud setup specifically for this workshop. You may also use your own local version of R and RStudio if preferred.\nWe also expect some prior experience using R. Please visit the intro to R page for a quick crash course.",
    "crumbs": [
      "About this Workshop"
    ]
  },
  {
    "objectID": "index.html#presenters",
    "href": "index.html#presenters",
    "title": "Actionable Data with Shiny Dashboards",
    "section": "Presenters",
    "text": "Presenters\n\nMarcus Beck\n\n\n\n\nMarcus Beck is the Program Scientist for the Tampa Bay Estuary Program in St. Petersburg, Florida and is developing data analysis and visualization methods for Bay health indicators. Marcus has experience researching environmental indicators and developing open science products to support environmental decision-making. He has been using the R statistical programming language for over 15 years and has taught several workshops on its application to environmental sciences. Marcus has also developed several R packages and currently maintains 7 on CRAN. He received a PhD in Conservation Biology with a minor in Statistics from the University of Minnesota in 2013, his Masters in Conservation Biology from the University of Minnesota in 2009, and his Bachelors in Zoology from the University of Florida in 2007.\n\n\n\n\nJen Stamp\n\n\nErik Lepp\n\n\nKateri Salk-Gunderson",
    "crumbs": [
      "About this Workshop"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Learning Objectives\nIn this module, you’ll learn why you may want to use Shiny and the problems it can solve in your own applications. You’ll also get a sense for how Shiny apps work at a basic level, including what is meant by reactivity. You should have a general understanding of how a Shiny app works as a foundation for the rest of the workshop.",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#what-is-and-why-shiny",
    "href": "intro.html#what-is-and-why-shiny",
    "title": "1  Introduction",
    "section": "1.1 What is and why shiny",
    "text": "1.1 What is and why shiny\nShiny is an R package that lets you create rich, interactive web applications. Shiny lets you take an existing R script and expose it using a web browser so that you or anybody else can use it outside of R. Shiny is commonly used to:\n\nCommunicate complex workflows to a non-technical audience with informative visualizations and interactive components\nShare your analysis easily with colleagues without having to walk them through details of your script\nHelp inform your understanding of an analysis by creating a user interface to quickly evaluate data\n\nIn the applied sciences world, Shiny can be a very important tool to “bridge the research-management divide”. A very simple example is the use of Shiny to replace a 500 page document that has hundreds of figures with a simple application that allows the user to jump to an exact slice of the data that they want.\nThere are many advantages to using Shiny over other platforms for creating web applications. As R users, the value of Shiny is that you only need to know how to use R. You do not need to know anything about web programming, such as HTML, CSS, or JavaScript. On the other hand, Shiny gives you the power to tap into this broader suite of web programming tools when you’re ready or have a need to expand your application.\nMore simply, Shiny lets you create a web interface for any R workflow. This means that any custom analysis or graphic you’ve made can be fully integrated into your dashboard, unlike other platforms that may have rigid and less customizable templates.",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#shiny-applications",
    "href": "intro.html#shiny-applications",
    "title": "1  Introduction",
    "section": "1.2 Shiny applications",
    "text": "1.2 Shiny applications\nThis workshop will expose you to the basics of creating interactive dashboards in R. The following shows a typical workflow for creating and deploying a Shiny application.\n\nA Shiny application is fully interactive - it has both a user interface (UI) and server allowing a user to send requests to the server through the UI. This allows reactivity of the application components, where the content that a user sees on the UI is controlled by their inputs in a fully interactive experience. These applications require combined or separate R scripts that define the UI and server components. Here’s an example.",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#reactivity",
    "href": "intro.html#reactivity",
    "title": "1  Introduction",
    "section": "1.3 Reactivity",
    "text": "1.3 Reactivity\nCreating interactive applications in Shiny requires a fundamental shift in how you think about coding. It’s all done in R, but the pieces interact differently. You’re used to an R script running top to bottom - code for a Shiny app runs up, down, and sideways depending on how you structure the components.\nA Shiny app runs from an R script, but instead of executing code linearly, it uses reactive programming that detects when an input is changed on the application, runs the minimal amount of code that uses that input, then updates the output as needed. So, rather than thinking of the script as linear, think of it as having interconnected components that share pieces of information to produce the results.\nThis can be daunting at first because it requires you to think about which pieces of your code require inputs from other pieces and how that information is used to create output. Reactivity creates the building blocks of a Shiny app. Every Shiny app has the following:\n\nUser interface (UI): Includes all inputs and outputs, as well as the appearance of the dashboard. Here, when we say “output” we mean the final product (e.g. a plot, table, etc.) that is placed on the ui, but created by processing inputs sent to the server. In web-speak, this is the front end.\nServer: The guts or engine of how the inputs are used to create the outputs, this is where the working parts of your analysis live. It can be as simple or as complicated as you like. In web-speak, this is the back end.\n\nAt it’s core, a Shiny app is an R script that contains The ui and server components. In practice, it looks like this:\n\nlibrary(shiny)\nui &lt;- fluidPage()\nserver &lt;- function(input, output){}\nshinyApp(ui = ui, server = server)\n\nYou “launch” or run the dashboard by sourcing the script or hitting the green “Run App” button on the top right.\n\nIf you run this code, you’ll see a local web browser pop up. It will be empty because this app does nothing - it’s just a template. All we need to do is populate the ui and server objects with code to do some things. We’ll do that in the next module.",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "fundamentals.html",
    "href": "fundamentals.html",
    "title": "2  Fundamentals",
    "section": "",
    "text": "Learning Objectives\nUse the Shiny framework to develop online interactive applications accepting user input to render outputs from arbitrary R functions.",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "fundamentals.html#a-simple-example",
    "href": "fundamentals.html#a-simple-example",
    "title": "2  Fundamentals",
    "section": "2.1 A simple example",
    "text": "2.1 A simple example\nWe’ll start with a simple application of Shiny. As with most problems, it’s good to start with identifying where you want to go and then work backwards to figure out how to get there. Let’s end with a simple histogram to visualize some data for the normal distribution, but with different sample sizes.\n\ndat &lt;- rnorm(100)\nhist(dat)\n\n\n\n\n\n\n\n\nChanging the sample size:\n\ndat &lt;- rnorm(10)\nhist(dat)\n\n\n\n\n\n\n\n\nTo make a Shiny app out of this, we need to identify our inputs and outputs. The input in this case is what we want to be able to modify (the sample size) and the output is the plot. This can all be done in a single script by creating a ui and server component. Inputs and outputs go in the ui object. The server takes the inputs, does something with them, then sends the results back to the ui. Putting this into our template would look something like this:\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  numericInput(inputId = 'n', label = 'Sample size', value = 50),\n  plotOutput('myplot')\n)\n\nserver &lt;- function(input, output){\n  output$myplot &lt;- renderPlot({\n    dat &lt;- rnorm(input$n)\n    hist(dat)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\nOkay, so what is happening under the hood when you change the sample size?\n\nThe input value n (you name it) from the ui is sent to the server, seen as input$n.\nThe dat object is created as a random sample with size n and then a histogram is created as reactive output with renderPlot\nThe plot output named myplot (you name it) is appended to the output list of objects in the server function\nThe plot is then rendered on the ui using plotOutput by referencing the myplot name from the output object\n\n\nAll of this happens each time the input values are changed, such that the output reacts to any change in the input. This is a fundamental principle of Shiny functionality, simplified as follows.\n\n\n\n\n\nA useful tool provided by Shiny is showcase mode…\nAnother useful way of learning the basics of the ui and server is to use the built-in Shiny template in RStudio. Under New File -&gt; Shiny Web App…, you can open a script that has a working Shiny app. Tinkering with this file will teach you a lot about how Shiny works.\nLet’s try it again from scratch, recreating our simple histogram example. Here’s what the template file looks like:\n\n#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    https://shiny.posit.co/\n#\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n\n    output$distPlot &lt;- renderPlot({\n        # generate bins based on input$bins from ui.R\n        x    &lt;- faithful[, 2]\n        bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, breaks = bins, col = 'darkgray', border = 'white',\n             xlab = 'Waiting time to next eruption (in mins)',\n             main = 'Histogram of waiting times')\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\nYour final product should look like this:\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n\n    # Application title\n    titlePanel(\"My awesome histogram app\"),\n\n    # Sidebar with a numeric input for sample size \n    sidebarLayout(\n        sidebarPanel(\n           numericInput(inputId = 'n', label = 'Sample size', value = 50)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n\n    output$distPlot &lt;- renderPlot({\n        \n      # generate random sample of size n\n        x &lt;- rnorm(input$n)\n\n        # draw the histogram\n        hist(x)\n        \n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\nThis is the same app as before, but the layout is different and we’ve only replaced the relevant pieces, i.e., the title, the numeric input widget, and a simpler plot.\nLet’s spice it up by adding a widget for changing the histogram color.\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n\n    # Application title\n    titlePanel(\"My awesome histogram app\"),\n\n    # Sidebar with a numeric input for sample size \n    sidebarLayout(\n        sidebarPanel(\n           numericInput(inputId = 'n', label = 'Sample size', value = 50), \n           selectInput(inputId = 'col', label = 'Choose color', choices = c('red', 'blue', 'green'))\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n\n    output$distPlot &lt;- renderPlot({\n        \n      # generate random sample of size n\n        x &lt;- rnorm(input$n)\n\n        # draw the histogram\n        hist(x, col = input$col)\n        \n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\nThere’s a lot to say about “widgets” - Shiny has many you can choose from depending on the type of input you need. This page provides an overview of available widgets.\nAlso notice how the random sample changes when you update the color. Why is that? How can we fix this?",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "fundamentals.html#debugging-a-shiny-app",
    "href": "fundamentals.html#debugging-a-shiny-app",
    "title": "2  Fundamentals",
    "section": "2.2 Debugging a Shiny app",
    "text": "2.2 Debugging a Shiny app\nbrowser()",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "fundamentals.html#a-better-example",
    "href": "fundamentals.html#a-better-example",
    "title": "2  Fundamentals",
    "section": "2.3 A better example",
    "text": "2.3 A better example\nWater quality time series",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "fundamentals.html#a-dirty-trick",
    "href": "fundamentals.html#a-dirty-trick",
    "title": "2  Fundamentals",
    "section": "2.4 A dirty trick…",
    "text": "2.4 A dirty trick…\nMuch has changed in the programming world over the last few years. As you might expect, there are generative AI tools to help build and develop Shiny apps.",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "deploy.html",
    "href": "deploy.html",
    "title": "3  Deployment and IT Hurdles",
    "section": "",
    "text": "text",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Deployment and IT Hurdles</span>"
    ]
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "Benthic Data\n\n\n\nTampa Bay\n\n\n\nA benthic data dashboard for Tampa Bay\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFL Water Quality Dash\n\n\n\nWater Quality\n\n\nTime Series\n\n\nflexdashboard\n\n\n\nDashboard for displaying basic water quality data in Florida.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLand Use Data\n\n\n\nTampa Bay\n\n\n\nA land use change dashboard for Tampa Bay\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNMS Climate Dashboard\n\n\n\nMBON\n\n\nClimate Change\n\n\nTime Series\n\n\n\nNOAA NMS Climate Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNekton Data\n\n\n\nTampa Bay\n\n\n\nA nekton data dashboard for Tampa Bay\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBIS Indicators\n\n\n\nMBON\n\n\nBiodiversity\n\n\nSpatial Mapping\n\n\n\nA library for mapping biodiversity using OBIS data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPiney Point Data\n\n\n\nTampa Bay\n\n\n\nA Piney Point dashboard for Tampa Bay\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRocky Intertidal Dashboard\n\n\n\nBiodiversity\n\n\nSpatial Mapping\n\n\nflexdashboard\n\n\n\nMBON Pole to Pole Biodiversity Dashboard.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScallop Data\n\n\n\nTampa Bay\n\n\n\nA scallop dashboard for Tampa Bay\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeagrass Data\n\n\n\nTampa Bay\n\n\nflexdashboard\n\n\n\nA seagrass transect dashboard for Tampa Bay\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeascapes for Sanctuaries\n\n\n\nMBON\n\n\nWater Quality\n\n\nTime Series\n\n\nSpatial Mapping\n\n\n\nSeascapes over time and space for US Sanctuaries\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidal Creek Data\n\n\n\nTampa Bay\n\n\nflexdashboard\n\n\n\nA tidal creek dashboard for Tampa Bay\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUseful Links\n\n\nAdditional resources for continued learning\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWater Quality\n\n\n\nTampa Bay\n\n\nWater Quality\n\n\nflexdashboard\n\n\n\nA water quality dashboard for Tampa Bay\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "resources/useful.html",
    "href": "resources/useful.html",
    "title": "Useful Links",
    "section": "",
    "text": "Quarto\nThe following is a non-exhaustive list of additional resources you can use for continued learning.",
    "crumbs": [
      "Resources",
      "Useful Links"
    ]
  },
  {
    "objectID": "resources/useful.html#quarto",
    "href": "resources/useful.html#quarto",
    "title": "Useful Links",
    "section": "",
    "text": "Official Quarto Website\nQuarto Reference Materials\nQuarto Cheatsheet\nLearning Quarto with RStudio\nOpenscapes Quarto Tutorial",
    "crumbs": [
      "Resources",
      "Useful Links"
    ]
  },
  {
    "objectID": "resources/useful.html#shiny",
    "href": "resources/useful.html#shiny",
    "title": "Useful Links",
    "section": "Shiny",
    "text": "Shiny\n\nOfficial Shiny Website\nLearning Shiny with RStudio\nMastering Shiny\nShiny Cheatsheet\nEngineering Production Grade Shiny Apps\nCERF 2023 Shiny workshop",
    "crumbs": [
      "Resources",
      "Useful Links"
    ]
  },
  {
    "objectID": "resources/useful.html#open-science-websites",
    "href": "resources/useful.html#open-science-websites",
    "title": "Useful Links",
    "section": "Open Science Websites",
    "text": "Open Science Websites\n\nNCEAS Open Science for Synthesis workshop\nNCEAS Reproducible Research Techniques\nOpen Science Foundation open science workshop\nOpenscapes\nOpenscapes Champions Lesson Series\nSupercharge your research: A 10 week plan for open data science\nROpenSci guidance on creating a Code of Conduct\nNOAA Reproducible Reporting with R\nPeerJ collection on practical data science",
    "crumbs": [
      "Resources",
      "Useful Links"
    ]
  },
  {
    "objectID": "resources/useful.html#data-management-tools",
    "href": "resources/useful.html#data-management-tools",
    "title": "Useful Links",
    "section": "Data Management Tools",
    "text": "Data Management Tools\n\nEnvironmental Data Initiative Data Management Resources\nUniversity of California DMPTool\nUS Geological Survey resources for Metadata Creation\nELIXIR and others Data Stewardship Wizard\nTBEP Data Management SOP",
    "crumbs": [
      "Resources",
      "Useful Links"
    ]
  },
  {
    "objectID": "resources/useful.html#tbep-r-trainings",
    "href": "resources/useful.html#tbep-r-trainings",
    "title": "Useful Links",
    "section": "TBEP R Trainings",
    "text": "TBEP R Trainings\n\nPeconic Estuary Program R training, recording\nTBEP June 2020 R training, recordings\nWriting functions in R\nR package development workflow\nA soft introduction to Shiny",
    "crumbs": [
      "Resources",
      "Useful Links"
    ]
  },
  {
    "objectID": "resources/useful.html#r-lessons-tutorials",
    "href": "resources/useful.html#r-lessons-tutorials",
    "title": "Useful Links",
    "section": "R Lessons & Tutorials",
    "text": "R Lessons & Tutorials\n\nSoftware Carpentry: R for Reproducible Scientific Analysis\nData Carpentry: Geospatial Workshop\nData Carpentry: R for Data Analysis and Visualization of Ecological Data\nData Carpentry: Data Organization in Spreadsheets\nR for Water Resources Data Science\nRStudio Webinars, many topics\nR For Cats: Basic introduction site, with cats!\nTopical cheatsheets from RStudio, also viewed from the help menu\nCheatsheet from CRAN of base R functions\nTotally awesome R-related artwork by Allison Horst\nColor reference PDF with text names, Color cheatsheet PDF from NCEAS",
    "crumbs": [
      "Resources",
      "Useful Links"
    ]
  },
  {
    "objectID": "resources/useful.html#r-ebookscourses",
    "href": "resources/useful.html#r-ebookscourses",
    "title": "Useful Links",
    "section": "R eBooks/Courses",
    "text": "R eBooks/Courses\n\nJenny Bryan’s Stat545.com\nGarrett Grolemund and Hadley Wickham’s R For Data Science\nChester Ismay and Albert Y. Kim’s Modern DiveR\nJulia Silge and David Robinson Text Mining with R\nHadley Wickham’s Advanced R\nHadley Wickham’s R for Data Science\nYihui Xie R Markdown: The Definitive Guide\nWinston Chang R Graphics Cookbook\nWegman et al. Remote Sensing and GIS for Ecologists: Using Open Source Software\nLovelace et al. Geocomputation with R\nEdszer Pebesma and Roger Bivand Spatial Data Science",
    "crumbs": [
      "Resources",
      "Useful Links"
    ]
  },
  {
    "objectID": "resources/useful.html#gitgithub",
    "href": "resources/useful.html#gitgithub",
    "title": "Useful Links",
    "section": "Git/Github",
    "text": "Git/Github\n\nJenny Bryan’s Happy Git and Github for the useR\nGit and GitHub for the Casual User\nCoding Club Intro to Github",
    "crumbs": [
      "Resources",
      "Useful Links"
    ]
  },
  {
    "objectID": "resources/tbepwq.html",
    "href": "resources/tbepwq.html",
    "title": "Water Quality",
    "section": "",
    "text": "Background\nThe water quality dashboard provides an in-depth view of water quality conditions in Tampa Bay, including a report card to assess annual trends by major bay segments. Additional features include an assessment of seasonal trends, site-level trends, and data downloads.",
    "crumbs": [
      "Resources",
      "Water Quality"
    ]
  },
  {
    "objectID": "resources/tbepwq.html#dashboard",
    "href": "resources/tbepwq.html#dashboard",
    "title": "Water Quality",
    "section": "Dashboard",
    "text": "Dashboard\nView the dashboard by visiting https://shiny.tbep.org/wq-dash",
    "crumbs": [
      "Resources",
      "Water Quality"
    ]
  },
  {
    "objectID": "resources/tbepsg.html",
    "href": "resources/tbepsg.html",
    "title": "Seagrass Data",
    "section": "",
    "text": "Background\nThe seagrass transect dashboard can be used to view results for the annual transect monitoring program in Tampa Bay. Data are available from the mid-1990s to present day. The dashboard provides summary information, results for individual transects, estimates of the seagrass edge, and data downloads.",
    "crumbs": [
      "Resources",
      "Seagrass Data"
    ]
  },
  {
    "objectID": "resources/tbepsg.html#dashboard",
    "href": "resources/tbepsg.html#dashboard",
    "title": "Seagrass Data",
    "section": "Dashboard",
    "text": "Dashboard\nView the dashboard by visiting https://shiny.tbep.org/seagrasstransect-dash",
    "crumbs": [
      "Resources",
      "Seagrass Data"
    ]
  },
  {
    "objectID": "resources/tbepbt.html",
    "href": "resources/tbepbt.html",
    "title": "Benthic Data",
    "section": "",
    "text": "Background\nThe benthic dashboard provides information on the biological health of the benthic communities in Tampa Bay and information on sediment contaminants. The benthic data are summarized using the Tampa Bay Benthic Index. Sediment data can be viewed for over 100 contaminants, including summary plots as PEL ratios.",
    "crumbs": [
      "Resources",
      "Benthic Data"
    ]
  },
  {
    "objectID": "resources/tbepbt.html#dashboard",
    "href": "resources/tbepbt.html#dashboard",
    "title": "Benthic Data",
    "section": "Dashboard",
    "text": "Dashboard\nView the dashboard by visiting https://shiny.tbep.org/benthic-dash",
    "crumbs": [
      "Resources",
      "Benthic Data"
    ]
  },
  {
    "objectID": "resources/tbeptc.html",
    "href": "resources/tbeptc.html",
    "title": "Tidal Creek Data",
    "section": "",
    "text": "Background\nTidal creeks or tributaries are essential habitats in the Tampa Bay estuary and serve as important focal points for understanding watershed inputs that affect water quality. This dashboard provides an interface to view and download results for all tidal creeks in the identified population of over 300 creeks in southwest Florida. A summary report card, individual creek indicators, and data downloads are available.",
    "crumbs": [
      "Resources",
      "Tidal Creek Data"
    ]
  },
  {
    "objectID": "resources/tbeptc.html#dashboard",
    "href": "resources/tbeptc.html#dashboard",
    "title": "Tidal Creek Data",
    "section": "Dashboard",
    "text": "Dashboard\nView the dashboard by visiting https://shiny.tbep.org/tidalcreek-dash",
    "crumbs": [
      "Resources",
      "Tidal Creek Data"
    ]
  },
  {
    "objectID": "resources/tbepnk.html",
    "href": "resources/tbepnk.html",
    "title": "Nekton Data",
    "section": "",
    "text": "Background\nNekton data describe fish and other swimming organisms that inhabitat an estuary. The Tampa Bay Nekton Index describes the condition of the nekton community as a single score from 0 - 100. The dashboard provides information on index scores by major bay segments and results for individual sample stations. Data downloads are also available.",
    "crumbs": [
      "Resources",
      "Nekton Data"
    ]
  },
  {
    "objectID": "resources/tbepnk.html#dashboard",
    "href": "resources/tbepnk.html#dashboard",
    "title": "Nekton Data",
    "section": "Dashboard",
    "text": "Dashboard\nView the dashboard by visiting https://shiny.tbep.org/nekton-dash",
    "crumbs": [
      "Resources",
      "Nekton Data"
    ]
  },
  {
    "objectID": "resources/tbeplu.html",
    "href": "resources/tbeplu.html",
    "title": "Land Use Data",
    "section": "",
    "text": "Background\nUpland, coastal, and subtidal habitats have changed dramatically in Tampa Bay and its watershed over the last several decades. This dashboard provides an overview of how these habitats have changed over time. Summaries are provided in simple tables and as change analysis plots that show shifts between habitat types. Data downloads are also available.",
    "crumbs": [
      "Resources",
      "Land Use Data"
    ]
  },
  {
    "objectID": "resources/tbeplu.html#dashboard",
    "href": "resources/tbeplu.html#dashboard",
    "title": "Land Use Data",
    "section": "Dashboard",
    "text": "Dashboard\nView the dashboard by visiting https://shiny.tbep.org/landuse-change",
    "crumbs": [
      "Resources",
      "Land Use Data"
    ]
  },
  {
    "objectID": "resources/tbeppp.html",
    "href": "resources/tbeppp.html",
    "title": "Piney Point Data",
    "section": "",
    "text": "Background\nPiney Point is a former fertilizer processing facility on the southeast shore of Tampa Bay. In March 2021, 215 million gallons of nutrient-rich wastewater from Piney Point were discharged to Tampa Bay. This dashboard provides a summary of the response-based monitoring data collected in 2021 to assess the effects of this large nutrient influx on the bay’s resources.",
    "crumbs": [
      "Resources",
      "Piney Point Data"
    ]
  },
  {
    "objectID": "resources/tbeppp.html#dashboard",
    "href": "resources/tbeppp.html#dashboard",
    "title": "Piney Point Data",
    "section": "Dashboard",
    "text": "Dashboard\nView the dashboard by visiting https://shiny.tbep.org/piney-point",
    "crumbs": [
      "Resources",
      "Piney Point Data"
    ]
  },
  {
    "objectID": "resources/tbepsc.html",
    "href": "resources/tbepsc.html",
    "title": "Scallop Data",
    "section": "",
    "text": "Background\nThe Scallop Data dashboard provides a summary of participatory science efforts to monitor the scallop population in Tampa Bay. The dashboard is dynamic and created using RMarkdown (Quarto predecessor). It does not include any server components as required by interactive Shiny dashboards.",
    "crumbs": [
      "Resources",
      "Scallop Data"
    ]
  },
  {
    "objectID": "resources/tbepsc.html#dashboard",
    "href": "resources/tbepsc.html#dashboard",
    "title": "Scallop Data",
    "section": "Dashboard",
    "text": "Dashboard\nView the dashboard by visiting https://tbep-tech.github.io/scallop-search/",
    "crumbs": [
      "Resources",
      "Scallop Data"
    ]
  },
  {
    "objectID": "resources/fl_wq_dash.html",
    "href": "resources/fl_wq_dash.html",
    "title": "FL Water Quality Dash",
    "section": "",
    "text": "Background\nData and decision support tools for assessing water quality in Florida.",
    "crumbs": [
      "Resources",
      "FL Water Quality Dash"
    ]
  },
  {
    "objectID": "resources/fl_wq_dash.html#docs",
    "href": "resources/fl_wq_dash.html#docs",
    "title": "FL Water Quality Dash",
    "section": "Docs",
    "text": "Docs\nView the dashboard at 7yl4r.shinyapps.io/wq-dash\n\n\n\nscreenshot",
    "crumbs": [
      "Resources",
      "FL Water Quality Dash"
    ]
  },
  {
    "objectID": "resources/nms_climate_dash.html",
    "href": "resources/nms_climate_dash.html",
    "title": "NMS Climate Dashboard",
    "section": "",
    "text": "Background\nDashboard of climate indicators across NOAA National Marine Sanctuaries.",
    "crumbs": [
      "Resources",
      "NMS Climate Dashboard"
    ]
  },
  {
    "objectID": "resources/nms_climate_dash.html#docs",
    "href": "resources/nms_climate_dash.html#docs",
    "title": "NMS Climate Dashboard",
    "section": "Docs",
    "text": "Docs\nView the docs at noaa-onms.github.io/climate-dashboard/\n\n\n\nscreenshot",
    "crumbs": [
      "Resources",
      "NMS Climate Dashboard"
    ]
  },
  {
    "objectID": "resources/obisindicators.html",
    "href": "resources/obisindicators.html",
    "title": "OBIS Indicators",
    "section": "",
    "text": "Background\nR package for generating indicators from OBIS",
    "crumbs": [
      "Resources",
      "OBIS Indicators"
    ]
  },
  {
    "objectID": "resources/obisindicators.html#docs",
    "href": "resources/obisindicators.html#docs",
    "title": "OBIS Indicators",
    "section": "Docs",
    "text": "Docs\nView the docs at marinebon.github.io/obisindicators/\n\n\n\nexample_es50_map",
    "crumbs": [
      "Resources",
      "OBIS Indicators"
    ]
  },
  {
    "objectID": "resources/rocky_shore_dash.html",
    "href": "resources/rocky_shore_dash.html",
    "title": "Rocky Intertidal Dashboard",
    "section": "",
    "text": "Background\nData visualization dashboard of biodiversity monitoring observations from rocky intertidal habitats.",
    "crumbs": [
      "Resources",
      "Rocky Intertidal Dashboard"
    ]
  },
  {
    "objectID": "resources/rocky_shore_dash.html#docs",
    "href": "resources/rocky_shore_dash.html#docs",
    "title": "Rocky Intertidal Dashboard",
    "section": "Docs",
    "text": "Docs\nView the dashboard in this Github repository\n\n\n\nscreenshot",
    "crumbs": [
      "Resources",
      "Rocky Intertidal Dashboard"
    ]
  },
  {
    "objectID": "resources/seascapes.html",
    "href": "resources/seascapes.html",
    "title": "Seascapes for Sanctuaries",
    "section": "",
    "text": "Background\nSeascapes are a dynamic sea water classification product derived from satellite imagery by Maria Kavanaugh et al.\nThe source code of the Shiny app makes use of custom data wrangling functions in the R package seascapeR and the following htmlwidgets for interactive visualization:",
    "crumbs": [
      "Resources",
      "Seascapes for Sanctuaries"
    ]
  },
  {
    "objectID": "resources/seascapes.html#background",
    "href": "resources/seascapes.html#background",
    "title": "Seascapes for Sanctuaries",
    "section": "",
    "text": "map: leaflet\ntime series: dygraphs",
    "crumbs": [
      "Resources",
      "Seascapes for Sanctuaries"
    ]
  },
  {
    "objectID": "resources/seascapes.html#docs",
    "href": "resources/seascapes.html#docs",
    "title": "Seascapes for Sanctuaries",
    "section": "Docs",
    "text": "Docs\nView the dashboard at shiny.marinebon.app/seascapes.\n\nThe different Seascape Classes are based on a combination of variables derived from clustering.",
    "crumbs": [
      "Resources",
      "Seascapes for Sanctuaries"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Appendix A — Setup for the workshop",
    "section": "",
    "text": "A.1 Posit Cloud\nThanks for your interest in the R Shiny workshop. You can participate during the worskhop in two ways. First, you can use an RStudio project setup on Posit Cloud (preferred) or you can use your own version of R and RStudio on your laptop. The instructions below describe setup for each.\nPlease reach out if you have any issues with installation: mbeck@tbep.org\nPosit Cloud provides an environment to use RStudio through a web browser. It’s useful as a workshop resource because necessary packages and scripts are already included. After the workshop, you’ll want to continue work with R and RStudio installed on your own computer.\nWe’ve created a workspace on Posit Cloud that includes all of the content for this workshop. Open the following URL in a web browser: https://posit.cloud/content/9569756\nYou will see a login screen that looks like this:\nSign up using a personal login or existing account (Google, GitHub, etc.).\nYou’ll see the workspace in your browser once you’ve signed in. You’ll need to make a permanent copy to save your work. Just click the button at the top marked “+ Save as Permanent Copy”. When this is done, the red text at the top indicating “TEMPORARY COPY” will no longer be visible.\nNow you can follow along with the workshop content.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Setup for the workshop</span>"
    ]
  },
  {
    "objectID": "setup.html#sec-rstudio",
    "href": "setup.html#sec-rstudio",
    "title": "Appendix A — Setup for the workshop",
    "section": "A.2 Install R and RStudio",
    "text": "A.2 Install R and RStudio\nYou can also use R and RStudio on your local computer for this workshop. Posit Cloud is setup as a convenience and you will want to work locally with R after the workshop.\nMost of the steps below will require administrative privileges on a computer. Work with your IT staff to complete the setup if you do not have these privileges. As an alternative, you can use Posit Cloud to participate (see Section A.1), although we strongly encourage you to install the software on your personal computer for use after the workshop.\nR and RStudio are separate downloads and installations. R is the underlying statistical computing software. RStudio is a graphical integrated development environment (IDE) that makes using R much easier and more interactive. You need to install R before you install RStudio.\nThanks to the USGS-R Training group and Data Carpentry for making their installation materials available. The following instructions come directly from their materials, with a few minor edits to help you get set up.\n\nA.2.1 Windows: Download and install R\nGo to CRAN and download the R installer for Windows. Make sure to choose the latest stable version (v4.2.3 as of April 2023).\nOnce the installer downloads, Right-click on it and select “Run as administrator”.\nType in your credentials and click yes (or if you don’t have administrator access have your IT rep install with Admin privileges).\n\nYou can click next through the standard dialogs and accept most defaults. But at the destination screen, please verify that it is installing it to C:\\Program Files\\R\n\nAt the “Select Components” screen, you can accept the default and install both 32-bit and 64-bit versions.\n\nAt this screen, uncheck ‘Create a desktop icon’ because non-admin users in Windows will be unable to delete it.\n\n\n\nA.2.2 Windows: Download and install RStudio\nDownload RStudio from here.\nAfter download, double-click the installer. It will ask for your administrator credentials to install (you might need to have your IT rep install again).\nAccept all the default options for the RStudio install.\n\n\n\nA.2.3 macOS: Download and install R\n\nDownload and install R from the CRAN website for Mac here.\nSelect the .pkg file for the latest R version\nDouble click on the downloaded file to install R\nIt is also a good idea to install XQuartz (needed by some packages)\n\n\n\nA.2.4 macOS: Download and install RStudio\n\nGo to the RStudio download page\nUnder Installers select the appropriate RStudio download file for macOS\nDouble click the file to install RStudio\n\n\n\nA.2.5 Check Install\nOnce installed, RStudio should be accessible from the start menu. Start up RStudio. Once running it should look something like this:",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Setup for the workshop</span>"
    ]
  },
  {
    "objectID": "setup.html#sec-setshi",
    "href": "setup.html#sec-setshi",
    "title": "Appendix A — Setup for the workshop",
    "section": "A.3 Setup shinyapps.io",
    "text": "A.3 Setup shinyapps.io\nThe shinyapps.io website is a service provided by Posit for hosting Shiny applications online. A free option is available, with additional paid tiers depending on your needs. Although there are other free options, this website is the easiest and quickest way to host a Shiny application.\nFirst, navigate to shinyapps.io and click the “Sign Up” button. After you’ve setup your GitHub account, you can sign up for shinyapps.io by selecting the GitHub sign up option.\n\nNext, install the rsconnect package in R. This package lets you connect to shinyapps.io and push applications from your local computer.\n\ninstall.packages(\"rsconnect\")\n\nYou need to obtain an access token from shinyapps.io to configure the rsconnect package to use your account. In your shinyapps.io dashboard, click your user name on the top right and select Tokens.\n\nAdd a new token, copy/paste the command to setup your account info, and execute it in the R console. It will look something like this and there will a button that allows you to copy the command to your clipboard, where &lt;TOKEN&gt; and &lt;SECRET&gt; are specific to your account and should not be shared.\n\nrsconnect::setAccountInfo(name='beckmw',\n              token='&lt;TOKEN&gt;',\n              secret='&lt;SECRET&gt;')\n\nNow you will be able to push a Shiny application to your shinyapps.io account as follows.\n\nlibrary(rsconnect)\ndeployApp()\n\nMore info can be found here.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Setup for the workshop</span>"
    ]
  },
  {
    "objectID": "rintro.html",
    "href": "rintro.html",
    "title": "Appendix B — Introduction to R",
    "section": "",
    "text": "B.1 RStudio\nRStudio is the go-to Interactive Development Environment (IDE) for R. Rstudio includes many features to improve the user’s experience.\nLet’s get familiar with RStudio.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "rintro.html#rstudio",
    "href": "rintro.html#rstudio",
    "title": "Appendix B — Introduction to R",
    "section": "",
    "text": "B.1.1 Open R and RStudio\nFind the RStudio shortcut on your computer and fire it up. You should see something like this:\n\nThere are four panes in RStudio:\n\nSource: Your primary window for writing code to send to the console, this is where you write and save R “scripts”\nConsole: This is where code is executed in R\nEnvironment, History, etc.: A tabbed window showing your working environment, code execution history, and other useful things\nFiles, plots, etc.: A tabbed window showing a file explorer, a plot window, list of installed packages, help files, and viewer\n\n\n\nB.1.2 Scripting\nIn most cases, you will not enter and execute code directly in the console. Code can be written in a script and then sent directly to the console.\nOpen a new script from the File menu…\n\n\n\nB.1.3 Executing code in RStudio\nAfter you write code in an R script, it can be sent to the Console to run the code. There are two ways to do this. First, you can hit the Run button at the top right of the scripting window. Second, you can use ctrl+enter (cmd+enter on a Mac). Either option will run the line(s) of script that are selected.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "rintro.html#r-language-fundamentals",
    "href": "rintro.html#r-language-fundamentals",
    "title": "Appendix B — Introduction to R",
    "section": "B.2 R language fundamentals",
    "text": "B.2 R language fundamentals\nR is built around functions. The basic syntax of a function follows the form: function_name(arg1, arg2, ...).\nWith the base install, you will gain access to many functions (2356, to be exact). Some examples:\n\n# print\nprint(\"hello world!\")\n\n[1] \"hello world!\"\n\n# sequence\nseq(1, 10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n# random numbers\nrnorm(100, mean = 10, sd = 2)\n\n  [1]  8.982401 10.652653  9.254282 11.462161 12.217427  7.696902 10.148321\n  [8] 11.766776  9.189032 10.677225  6.029223 12.136875 13.865380 10.579649\n [15]  6.808092  8.657550  9.526789 12.869891 12.367757  9.526951 13.597337\n [22]  9.425165 12.522305  8.481374  8.293782  6.889301  8.070139  8.698414\n [29] 11.903983 13.334111  8.210226  8.472390 11.193553  8.311874 12.381948\n [36]  7.421535 11.677820 10.117421 11.912353 12.928373 11.767325 10.811359\n [43] 11.026476 10.758864  6.910250  6.378889 11.113505 10.689252 11.532418\n [50]  7.093954 10.306992 10.485516 11.876066  7.896684 10.428130  7.973774\n [57] 11.093767  7.025147  9.440572  9.368091  9.350101  8.501192 11.589558\n [64] 11.393206 10.043581 10.177817 11.607025  9.034564  8.263260  8.298113\n [71] 10.421317  9.882128  7.956854 13.055769  7.150127  8.168416  9.114385\n [78]  9.882834  8.243984 11.327304 11.590530  7.188248 11.279338 11.086143\n [85] 12.268355  9.559287  8.933260 10.450849 10.930945  6.095640  7.653169\n [92]  8.910364  7.316574 11.473584 15.089869 12.302301 11.198786 10.375990\n [99] 10.485694 11.451684\n\n# average \nmean(rnorm(100))\n\n[1] 0.03484288\n\n# sum\nsum(rnorm(100))\n\n[1] -3.926601\n\n\nVery often you will see functions used like this:\n\nmy_random_sum &lt;- sum(rnorm(100))\n\nThe first part of the line is the name of an object that you make up. The second bit, &lt;-, is the assignment operator. This tells R to take the result of sum(rnorm(100)) and store it in an object named, my_random_sum. It is stored in the environment and can be used by just executing it’s name in the console.\n\nmy_random_sum\n\n[1] 8.891376\n\n\n\nB.2.1 What is the environment?\nThere are two outcomes when you run code. First, the code will simply print output directly in the console. Second, there is no output because you have stored it as a variable using &lt;-. Output that is stored is saved in the environment. The environment is the collection of named objects that are stored in memory for your current R session.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "rintro.html#packages",
    "href": "rintro.html#packages",
    "title": "Appendix B — Introduction to R",
    "section": "B.3 Packages",
    "text": "B.3 Packages\nThe base installation of R is quite powerful. Packages allow you to include new methods for use in R.\n\nB.3.1 CRAN\nMany packages are available on CRAN, The Comprehensive R Archive Network. This is where you download R and also where most will gain access to packages. As of 2025-01-20, there are 21911 packages on CRAN!\n\n\nB.3.2 Installing packages\nWhen a package gets installed, that means the source code is downloaded and put into your library. A default library location is set for you.\nWe use the install.packages() function to download and install a package. Here, we install the readxl package, used below, which is used to upload data from and Excel file.\n\ninstall.packages(\"readxl\")\n\nYou should see some text in the R console showing progress of the installation and a prompt after installation is done.\nAfter installation, you can load a package using the library() function. This makes all functions in a package available for you to use.\n\nlibrary(readxl)\n\nAn important aspect of packages is that you only need to download them once, but every time you start RStudio you need to load them with the library() function.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "rintro.html#data-structures-in-r",
    "href": "rintro.html#data-structures-in-r",
    "title": "Appendix B — Introduction to R",
    "section": "B.4 Data structures in R",
    "text": "B.4 Data structures in R\nNow we can talk about R data structures. Simply put, a data structure is a way for programming languages to handle information storage.\n\nB.4.1 Vectors (one-dimensional data)\nThe basic data format in R is a vector - a one-dimensional grouping of elements that have the same type. These are all vectors and they are created with the c (concatenate) function:\n\ndbl_var &lt;- c(1, 2.5, 4.5)\nint_var &lt;- c(1L, 6L, 10L)\nlog_var &lt;- c(TRUE, FALSE, T, F)\nchr_var &lt;- c(\"a\", \"b\", \"c\")\n\nThe four types of vectors are double (or numeric), integer, logical, and character. The following functions can return useful information about the vectors:\n\nclass(dbl_var)\n\n[1] \"numeric\"\n\nlength(log_var)\n\n[1] 4\n\n\n\n\nB.4.2 Data frames (two-dimensional data)\nA collection of vectors represented as one data object are often described as two-dimensional data, like a spreadsheet, or in R speak, a data frame. Here’s a simple example:\n\nltrs &lt;- c(\"a\", \"b\", \"c\")\nnums &lt;- c(1, 2, 3)\nlogs &lt;- c(T, F, T)\nmydf &lt;- data.frame(ltrs, nums, logs)\nmydf\n\n  ltrs nums  logs\n1    a    1  TRUE\n2    b    2 FALSE\n3    c    3  TRUE\n\n\nThe only constraints required to make a data frame are:\n\nEach column (vector) contains the same type of data\nThe number of observations in each column is equal.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "rintro.html#getting-your-data-into-r",
    "href": "rintro.html#getting-your-data-into-r",
    "title": "Appendix B — Introduction to R",
    "section": "B.5 Getting your data into R",
    "text": "B.5 Getting your data into R\nIt is the rare case when you manually enter your data in R. Most data analysis workflows typically begin with importing a dataset from an external source. We’ll be using read_excel() function from the readxl package.\nWe can import the ExampleSites.xlsx dataset as follows. Note the use of a relative file path. You can see what R is using as your “working directory” using the getwd() function.\n\nsitdat &lt;- read_excel(\"data/ExampleSites.xlsx\")\n\nLet’s explore the dataset a bit.\n\n# get the dimensions\ndim(sitdat)\n\n[1] 11  5\n\n# get the column names\nnames(sitdat)\n\n[1] \"Monitoring Location ID\"        \"Monitoring Location Name\"     \n[3] \"Monitoring Location Latitude\"  \"Monitoring Location Longitude\"\n[5] \"Location Group\"               \n\n# see the first six rows\nhead(sitdat)\n\n# A tibble: 6 × 5\n  `Monitoring Location ID` `Monitoring Location Name` Monitoring Location Lati…¹\n  &lt;chr&gt;                    &lt;chr&gt;                                           &lt;dbl&gt;\n1 ABT-026                  Rte 2, Concord                                   42.5\n2 ABT-062                  Rte 62, Acton                                    42.4\n3 ABT-077                  Rte 27/USGS, Maynard                             42.4\n4 ABT-144                  Rte 62, Stow                                     42.4\n5 ABT-237                  Robin Hill Rd, Marlboro                          42.3\n6 ABT-301                  Rte 9, Westboro                                  42.3\n# ℹ abbreviated name: ¹​`Monitoring Location Latitude`\n# ℹ 2 more variables: `Monitoring Location Longitude` &lt;dbl&gt;,\n#   `Location Group` &lt;chr&gt;\n\n# get the overall structure\nstr(sitdat)\n\ntibble [11 × 5] (S3: tbl_df/tbl/data.frame)\n $ Monitoring Location ID       : chr [1:11] \"ABT-026\" \"ABT-062\" \"ABT-077\" \"ABT-144\" ...\n $ Monitoring Location Name     : chr [1:11] \"Rte 2, Concord\" \"Rte 62, Acton\" \"Rte 27/USGS, Maynard\" \"Rte 62, Stow\" ...\n $ Monitoring Location Latitude : num [1:11] 42.5 42.4 42.4 42.4 42.3 ...\n $ Monitoring Location Longitude: num [1:11] -71.4 -71.4 -71.4 -71.5 -71.6 ...\n $ Location Group               : chr [1:11] \"Assabet\" \"Assabet\" \"Assabet\" \"Assabet\" ...\n\n\nYou can also view a dataset in a spreadsheet style using the View() function:\n\nView(sitdat)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "rintro.html#summary",
    "href": "rintro.html#summary",
    "title": "Appendix B — Introduction to R",
    "section": "B.6 Summary",
    "text": "B.6 Summary\nIn this intro we learned about R and Rstudio, some of the basic syntax and data structures in R, and how to import files. You’ll be able to follow the rest of the workshop with this knowledge.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  }
]