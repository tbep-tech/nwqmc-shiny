[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Actionable Data with Shiny Dashboards",
    "section": "",
    "text": "About this Workshop\nThe Shiny R package is over ten years old and is a popular tool to create immersive, web-based content. Although many water quality scientists and professionals have experience with R, expertise in dashboards is uncommon. This workshop will introduce the fundamentals of building Shiny dashboards in R using real-world examples with hands-on coding exercises. The benefits of developing Shiny dashboards and their potential applications to improve research, monitoring, and management will be discussed. Special attention will be on the merits of open source software for creating reproducible and transparent dashboard workflows, including addressing common deployment and IT hurdles. Attendees are strongly encouraged to bring their own laptops to follow along with the workshop exercises.\nAnyone interested in learning how to expand existing R skills for dashboard development will benefit from this workshop. This includes student, early career, and advanced professionals from any employment sector and field of expertise.",
    "crumbs": [
      "About this Workshop"
    ]
  },
  {
    "objectID": "index.html#agenda",
    "href": "index.html#agenda",
    "title": "Actionable Data with Shiny Dashboards",
    "section": "Agenda",
    "text": "Agenda\n\n\n\n\n\nTime\nTopic\n\n\n\n\n10:30\nIntroduction\n\n\n10:45\nFundamentals\n\n\n11:30\nDeployment and IT Hurdles\n\n\n12:00\nadjourn",
    "crumbs": [
      "About this Workshop"
    ]
  },
  {
    "objectID": "index.html#important-links",
    "href": "index.html#important-links",
    "title": "Actionable Data with Shiny Dashboards",
    "section": "Important links",
    "text": "Important links\n\nWorkshop Website: link\nLive Chat: link\nPosit Cloud: link\nPost-workshop survey: link",
    "crumbs": [
      "About this Workshop"
    ]
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "Actionable Data with Shiny Dashboards",
    "section": "Setup",
    "text": "Setup\nPlease visit the setup page for instructions on participating during this workshop. You can use an RStudio project on Posit Cloud setup specifically for this workshop. You may also use your own local version of R and RStudio if preferred.\nWe also expect some prior experience using R. Please visit the intro to R page for a quick crash course.",
    "crumbs": [
      "About this Workshop"
    ]
  },
  {
    "objectID": "index.html#presenters",
    "href": "index.html#presenters",
    "title": "Actionable Data with Shiny Dashboards",
    "section": "Presenters",
    "text": "Presenters\n\nMarcus Beck\nMarcus Beck is the Program Scientist for the Tampa Bay Estuary Program in St. Petersburg, Florida and is developing data analysis and visualization methods for Bay health indicators. Marcus has experience researching environmental indicators and developing open science products to support environmental decision-making. He has been using the R statistical programming language for over 15 years and has taught several workshops on its application to environmental sciences. Marcus has also developed several R packages and currently maintains 7 on CRAN. He received a PhD in Conservation Biology with a minor in Statistics from the University of Minnesota in 2013, his Masters in Conservation Biology from the University of Minnesota in 2009, and his Bachelors in Zoology from the University of Florida in 2007. GitHub, Scholar, CV\n\n\nErik Leppo\nErik W. Leppo is an environmental scientist and data scientist based in Maryland. He has been working with Tetra Tech since 1994, focusing on environmental data analysis and biomonitoring. Erik has extensive experience with R programming since 2006 and has been developing Shiny applications since 2017. He is also active on GitHub, where he shares various tools for biomonitoring and bioassessment. He maintains the baytrends package on CRAN. He has led or helped run several R workshops and discussions at both the Association of Mid-Atlantic Aquatic Biologists (AMAAB) and the National Water Quality Monitoring Council (NWQMC) conference. GitHub\n\n\nKateri Salk-Gunderson",
    "crumbs": [
      "About this Workshop"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Learning Objectives\nIn this module, you’ll learn why you may want to use Shiny and the problems it can solve in your own applications. You’ll also get a sense for how Shiny apps work at a basic level, including what is meant by reactivity. You should have a general understanding of how a Shiny app works as a foundation for the rest of the workshop.",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#what-is-and-why-shiny",
    "href": "intro.html#what-is-and-why-shiny",
    "title": "1  Introduction",
    "section": "1.1 What is and why shiny",
    "text": "1.1 What is and why shiny\nShiny is an R package that lets you create rich, interactive web applications. Shiny lets you take an existing R script and expose it using a web browser so that you or anybody else can use it outside of R. Shiny is commonly used to:\n\nCommunicate complex workflows to a non-technical audience with informative visualizations and interactive components\nShare your analysis easily with colleagues without having to walk them through details of your script\nHelp inform your understanding of an analysis by creating a user interface to quickly evaluate data\n\nIn the applied sciences world, Shiny can be a very important tool to “bridge the research-management divide”. A common example is the use of Shiny to replace a 500 page document that has hundreds of figures with a simple application that allows the user to jump to an exact slice of the data that they want.\nThere are many advantages to using Shiny over other dashboard platforms. As R users, the value of Shiny is that you only need to know how to use R to create a web application. You do not need to know anything about web programming, such as HTML, CSS, or JavaScript. On the other hand, Shiny gives you the power to tap into this broader suite of web programming tools when you’re ready and have a need to expand your application.\nMore simply, Shiny lets you create a web interface for any R workflow. This means that any custom analysis or graphic you’ve made can be fully integrated into your dashboard, unlike other platforms that may have rigid and less customizable templates.",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#shiny-applications",
    "href": "intro.html#shiny-applications",
    "title": "1  Introduction",
    "section": "1.2 Shiny applications",
    "text": "1.2 Shiny applications\nThis workshop will expose you to the basics of creating interactive dashboards in R. The following shows a typical workflow for creating and deploying a Shiny application.\n\n\nYou’ll start by creating the application locally with RStudio on your computer.\n\nIdeally, you’ll also be using version control software like Git and hosting the app in a repository on GitHub. This is not a requirement to building a Shiny app, rather it’s part of a broader workflow for reproducibility and shareability of your code. Git/GitHub is an entirely different topic that’s worth learning but not the focus of this workshop. There are resources available in the Useful Links portion of this website.\nFinally, the app is hosted online using Shiny Server that works with both the ui and server components of the app. More about this later.\n\nA Shiny application is fully interactive - it has both a user interface (UI) and server allowing a user to send requests to the server through the UI. This allows reactivity of the application components, where the content that a user sees on the UI is controlled by their inputs in a fully interactive experience. These applications require combined or separate R scripts that define the UI and server components.",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#reactivity",
    "href": "intro.html#reactivity",
    "title": "1  Introduction",
    "section": "1.3 Reactivity",
    "text": "1.3 Reactivity\nCreating interactive applications in Shiny requires a fundamental shift in how you think about coding. It’s all done in R, but the pieces interact differently. You’re used to an R script running top to bottom - code for a Shiny app runs up, down, and sideways depending on how you structure the components.\nA Shiny app runs from an R script, but instead of executing code linearly, it uses reactive programming that detects when an input is changed on the application, runs the minimal amount of code that uses that input, then updates the output as needed. So, rather than thinking of the script as linear, think of it as having interconnected components that share pieces of information to produce the results.\nThis can be daunting at first because it requires you to think about which pieces of your code require inputs from other pieces and how that information is used to create output. Reactivity creates the building blocks of a Shiny app. Every Shiny app has the following:\n\nUser interface (UI): Includes all inputs and outputs, as well as the appearance of the dashboard. Here, when we say “output” we mean the final product (e.g. a plot, table, etc.) that is placed on the ui, but created by processing inputs sent to the server. In web-speak, this is the front end.\nServer: The guts or engine of how the inputs are used to create the outputs, this is where the working parts of your analysis live. It can be as simple or as complicated as you like. In web-speak, this is the back end.\n\n\n\n\n\n\nAt it’s core, a Shiny app is an R script that contains The ui and server components. In practice, it looks like this:\n\nlibrary(shiny)\nui &lt;- fluidPage()\nserver &lt;- function(input, output){}\nshinyApp(ui = ui, server = server)\n\nYou “launch” or run the dashboard by sourcing the script or hitting the green “Run App” button on the top right.\n\nIf you run this code, you’ll see a local web browser pop up. It will be empty because this app does nothing - it’s just a template. All we need to do is populate the ui and server objects with code to do some things. We’ll do that in the next module.",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "fundamentals.html",
    "href": "fundamentals.html",
    "title": "2  Fundamentals",
    "section": "",
    "text": "Learning Objectives\nUse the Shiny framework to develop interactive applications accepting user input to render outputs from arbitrary R functions.",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "fundamentals.html#install-packages",
    "href": "fundamentals.html#install-packages",
    "title": "2  Fundamentals",
    "section": "2.1 Install packages",
    "text": "2.1 Install packages\nLet’s begin by installing and loading the packages used for this workshop. This will already be installed if you’re using Posit Cloud.\n\noptions(repos = c(\n    tbeptech = 'https://tbep-tech.r-universe.dev',\n    CRAN = 'https://cloud.r-project.org'))\n\n# install and load\ninstall.packages(c('shiny', 'plotly', 'tbeptools', 'tidyverse'))*\nlibrary(plotly)\nlibrary(shiny)\nlibrary(tbeptools)\nlibrary(tidyverse)",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "fundamentals.html#a-simple-example",
    "href": "fundamentals.html#a-simple-example",
    "title": "2  Fundamentals",
    "section": "2.2 A simple example",
    "text": "2.2 A simple example\nWe’ll start with a simple application of Shiny. As with most problems, it’s good to start with identifying where you want to go and then work backwards to figure out how to get there. Let’s end with a simple histogram to visualize some data for the normal distribution, but with different sample sizes. To start, we create the simple plot with the random data of a given sample size.\n\ndat &lt;- rnorm(100)\nhist(dat)\n\n\n\n\n\n\n\n\nChanging the sample size:\n\ndat &lt;- rnorm(10)\nhist(dat)\n\n\n\n\n\n\n\n\nWe need to identify our inputs and outputs to use this in a Shiny framework. The input is what we want to be able to modify (the sample size) and the output is the plot. This can all be done in a single script by creating a ui and server component. Inputs and outputs go in the ui object and will include our selection for the sample size and the resulting plot. The server processes the inputs and produces the output, which will be the random sample generation and creation of the plot.\nUsing our template from before:\n\nlibrary(shiny)\nui &lt;- fluidPage()\nserver &lt;- function(input, output){}\nshinyApp(ui = ui, server = server)\n\nThen putting this into our template would look something like this:\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  numericInput(inputId = 'n', label = 'Sample size', value = 50),\n  plotOutput('myplot')\n)\n\nserver &lt;- function(input, output){\n  output$myplot &lt;- renderPlot({\n    dat &lt;- rnorm(input$n)\n    hist(dat)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\nOkay, so what is happening under the hood when you change the sample size?\n\nThe input value n (you name it) for the server is chosen by the user from the ui. This uses the numericInput() widget.\n\nui &lt;- fluidPage(\n  numericInput(inputId = 'n', label = 'Sample size', value = 50),\n  plotOutput('myplot')\n)\n\nShiny recognizes that the input$n value comes from the ui and is used by the server to create the random sample dat.\n\nserver &lt;- function(input, output){\n  output$myplot &lt;- renderPlot({\n    dat &lt;- rnorm(input$n)\n    hist(dat)\n  })\n}\n\nThe dat object with sample size n is then used to create a histogram.\n\nserver &lt;- function(input, output){\n  output$myplot &lt;- renderPlot({\n    dat &lt;- rnorm(input$n)\n    hist(dat)\n  })\n}\n\nThe plot output named myplot (you name it) is created using the renderPlot() function and appended to the output list of objects in the server function.\n\nserver &lt;- function(input, output){\n  output$myplot &lt;- renderPlot({\n    dat &lt;- rnorm(input$n)\n    hist(dat)\n  })\n}\n\nThe plot is then rendered on the ui using plotOutput by referencing the myplot name from the output object\n\nui &lt;- fluidPage(\n  numericInput(inputId = 'n', label = 'Sample size', value = 50),\n  plotOutput('myplot')\n)\n\n\nThis is what it looks like in a simple flowchart.\n\n\n\n\n\nAll of this happens each time the input values are changed, such that the output reacts to any change in the input.\nOne other piece of advice to understand how app fundamentals is about the standard naming convention for reactive functions. Notice in the example that plotting components for the server and ui have paired functions named renderPlot() and plotOutput(). Every piece of a working Shiny app requires these two pieces to create and show content. The naming convention is similar for other elements of an app, e.g., renderTable() and tableOutput() for tabular content.",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "fundamentals.html#using-the-rstudio-template",
    "href": "fundamentals.html#using-the-rstudio-template",
    "title": "2  Fundamentals",
    "section": "2.3 Using the RStudio template",
    "text": "2.3 Using the RStudio template\nAnother useful way of learning the basics of the ui and server is to use the built-in Shiny template in RStudio. Under File -&gt; New File -&gt; Shiny Web App…, you can open a script that has a working Shiny app. Tinkering with this file will teach you a lot about how Shiny works.\nFor now, let’s go with the single file option that puts the entire application in app.R rather than splitting it in two (ui.R, server.R).\n\n\n\n\n\nLet’s try it again from scratch, recreating our simple histogram example. Here’s what the template file looks like:\n\n#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    https://shiny.posit.co/\n#\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n\n    output$distPlot &lt;- renderPlot({\n        # generate bins based on input$bins from ui.R\n        x    &lt;- faithful[, 2]\n        bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, breaks = bins, col = 'darkgray', border = 'white',\n             xlab = 'Waiting time to next eruption (in mins)',\n             main = 'Histogram of waiting times')\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\nThis app template has a lot more pieces than the last example. In particular, the sidebarLayout() format is used for the ui with a sidebarPanel() for the widget selection and a mainPanel() for the plot output.\nWe can replace the relevant pieces with those used in our initial histogram app. What does this app do differently from the original?\nYour final product should look like this:\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n\n    # Application title\n    titlePanel(\"My awesome histogram app\"),\n\n    # Sidebar with a numeric input for sample size \n    sidebarLayout(\n        sidebarPanel(\n           numericInput(inputId = 'n', label = 'Sample size', value = 50)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n\n    output$distPlot &lt;- renderPlot({\n        \n      # generate random sample of size n\n        x &lt;- rnorm(input$n)\n\n        # draw the histogram\n        hist(x)\n        \n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\nThis is the same app as before, but we’ve only replaced the relevant pieces, i.e., the title, the numeric input widget, and a simpler plot.\nLet’s spice it up by adding a widget for changing the histogram color. There’s a lot to say about “widgets” - Shiny has many you can choose from depending on the type of input you need. This page provides an overview of available widgets. We’ll add the selectInput() widget for the colors.\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n\n    # Application title\n    titlePanel(\"My awesome histogram app\"),\n\n    # Sidebar with a numeric input for sample size \n    sidebarLayout(\n        sidebarPanel(\n           numericInput(inputId = 'n', label = 'Sample size', value = 50), \n           selectInput(inputId = 'col', label = 'Choose color', choices = c('red', 'blue', 'green'))\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n\n    output$distPlot &lt;- renderPlot({\n        \n      # generate random sample of size n\n        x &lt;- rnorm(input$n)\n\n        # draw the histogram\n        hist(x, col = input$col)\n        \n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\nNotice how the random sample changes when you update the color. Why is that? How can we fix this?",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "fundamentals.html#debugging-a-shiny-app",
    "href": "fundamentals.html#debugging-a-shiny-app",
    "title": "2  Fundamentals",
    "section": "2.4 Debugging a Shiny app",
    "text": "2.4 Debugging a Shiny app\nFiguring out why and where your code might break in an application is challenging because of the reactivity inherent in a Shiny app. You can’t just run the app step by step as you would a normal R script. The browser() function can be used to “step inside” the R code of an app. The browser() function can work with any arbitrary R function and works similarly with Shiny apps that share many similarities with functions. We’ll first demonstrate how to use it with a simple function.\n\nmy_func &lt;- function(n){\n\n  x &lt;- rnorm(n)\n  hist(x)\n  \n}\nmy_func(n = 100)\n\n\n\n\n\n\n\n\nLet’s save this code in a new R script, place the browser() function inside of my_func(), and run the code again.\n\nmy_func &lt;- function(n){\n\n  browser()\n  x &lt;- rnorm(n)\n  hist(x)\n  \n}\nmy_func(n = 100)\n\nTwo things happen when the code is run:\n\nThe source code now highlights the browser() function with a green arrow. This indicates your current location inside the browser.\n\n\n\n\n\nThe console will show that you’re in the browser.\n\n\n\n\n\nBrowser controls appear at the top of the console.\n\n\n\n\n\n\nYou can now “step” through the function using these controls or by pressing “enter”. The code will run as intended if there are no errors. You will exit the browser once the code execution is complete or if you hit the “Stop” button on the controls. Any objects created inside the function will be available for you to investigate if there are issues.\nThe browser() works the same with a Shiny app. You’ll use it within objects in the server component since these behave as functions. For example:\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n  \n  output$distPlot &lt;- renderPlot({\n    browser()\n    # generate random sample of size n\n    x &lt;- rnorm(input$n)\n    \n    # draw the histogram\n    hist(x, col = input$col)\n    \n  })\n}\n\nThe browser takes a bit of practice to get comfortable, but you’ll quickly find it useful for debugging apps, particularly those that have multiple working parts. For more information on debugging, checkout the article Debugging Shiny applications",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "fundamentals.html#create-a-complex-shiny-app",
    "href": "fundamentals.html#create-a-complex-shiny-app",
    "title": "2  Fundamentals",
    "section": "2.5 Create a complex Shiny app",
    "text": "2.5 Create a complex Shiny app\nNow that we know the basics of a Shiny app and how to debug, we’ll create a more involved example similar to one you may encounter with water quality data. For example, a common use of Shiny is to plot data where there are multiple options to choose the type of data you have, e.g., multiple sampling stations and multiple parameters. Shiny can be used to easily subset parts of the data that are of interest rather than producing all possible combinations.\nWe’ll create an interactive time series plot where users can select a station from a drop-down menu and see the time series for any of the available indicators chosen from another drop-down selection.\n\n\n\nComplex app to create using water quality data from Tampa Bay, FL.\n\n\nIn this extended tutorial, we will explore more complex topics of reactivity, data wrangling with dplyr, and the advantages of using R libraries that wrap JavaScript functionality. We’ll start from the default Shiny application using the Old Faithful Geyser data and transform it into a more complex application.\n\n2.5.1 Prepare data\nFirst, let’s prepare the water quality data for our app using a dataset from the Tampa Bay Estuary Program R package tbeptools.\n\nlibrary(tbeptools)\n\nepcdata\n\n# A tibble: 27,961 × 26\n   bay_segment epchc_station SampleTime             yr    mo Latitude Longitude\n   &lt;chr&gt;               &lt;dbl&gt; &lt;dttm&gt;              &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 HB                      6 2023-12-19 10:01:00  2023    12     27.9     -82.5\n 2 HB                      7 2023-12-19 10:12:00  2023    12     27.9     -82.5\n 3 HB                      8 2023-12-19 12:39:00  2023    12     27.9     -82.4\n 4 MTB                     9 2023-12-19 11:54:00  2023    12     27.8     -82.4\n 5 MTB                    11 2023-12-19 10:25:00  2023    12     27.8     -82.5\n 6 MTB                    13 2023-12-19 10:38:00  2023    12     27.8     -82.5\n 7 MTB                    14 2023-12-19 11:24:00  2023    12     27.8     -82.5\n 8 MTB                    16 2023-12-20 09:35:00  2023    12     27.7     -82.5\n 9 MTB                    19 2023-12-20 09:49:00  2023    12     27.7     -82.6\n10 LTB                    23 2023-12-20 13:16:00  2023    12     27.7     -82.6\n# ℹ 27,951 more rows\n# ℹ 19 more variables: Total_Depth_m &lt;dbl&gt;, Sample_Depth_m &lt;dbl&gt;, tn &lt;dbl&gt;,\n#   tn_q &lt;chr&gt;, sd_m &lt;dbl&gt;, sd_raw_m &lt;dbl&gt;, sd_q &lt;chr&gt;, chla &lt;dbl&gt;,\n#   chla_q &lt;chr&gt;, Sal_Top_ppth &lt;dbl&gt;, Sal_Mid_ppth &lt;dbl&gt;,\n#   Sal_Bottom_ppth &lt;dbl&gt;, Temp_Water_Top_degC &lt;dbl&gt;,\n#   Temp_Water_Mid_degC &lt;dbl&gt;, Temp_Water_Bottom_degC &lt;dbl&gt;,\n#   `Turbidity_JTU-NTU` &lt;chr&gt;, Turbidity_Q &lt;chr&gt;, Color_345_F45_PCU &lt;chr&gt;, …\n\n\nThe epcdata (?epcdata for details) object is a long-term time series starting in the 1970s collected monthly at numerous stations in Tampa Bay by the Environmental Protection Commission (EPC) of Hillsborough County. There are also numerous parameters that are measured.\nHow should we prepare epcdata for use with the dashboard? Remember, our goals are to be able to create a time series and map for a selected station and parameter:\n\nLet’s assume we only want three indicators: Total Nitrogen (mg/L) (tn), Chlorophyll-a (ug/L) (chla), and Secchi depth (m) (sd_m). Based on tidy principles, we want each row to capture a unique “observation” and any co-varying “variables” (such as location and time). This will allow us to easily filter rows for plotting.\nThe epcdata is currently in wide format, with each variable as its own column. We want to pivot it to long format so that each row is an observation of a single indicator. The dplyr package is the ‘swiss army knife’ (or ‘plyers’) for data wrangling, along with its close cousin tidyr. Let’s look at some basic operations: filtering, selecting, and pivoting. Be sure to reference Posit Cheatsheets like Data tidying with tidyr :: Cheatsheet and Data transformation with dplyr :: Cheatsheet.\nFilter\n\nReduce rows based on condition(s) that evaluate logically (i.e. True or False)\nepcdata |&gt; \n  dplyr::filter(epchch_station == 8)\nSelect\n\nReduce columns to only those specified\nepcdata |&gt; \n  dplyr::select(\n    station = epchc_station, \n    SampleTime,\n    lon     = Longitude,\n    lat     = Latitude)\nPivot\n\nTransform the data from wide to long format\nepcdata |&gt; \n  tidyr::pivot_longer(\n    names_to  = \"var\", \n    values_to = \"val\")\n\nApplying the above concepts, create a new folder app-wq for the water quality app and create the R file app-wq.R inside the folder with the following contents:\n\n# * load libraries ----\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(tbeptools)\n\n# * prep data ----\nd &lt;- epcdata |&gt;\n  select(\n    station                 = epchc_station,\n    SampleTime,\n    `Total Nitrogen (mg/L)` = tn,\n    `Chlorophyll-a (ug/L)`  = chla,\n    `Secchi depth (m)`      = sd_m) |&gt;\n  pivot_longer(\n    names_to  = \"indicator\",\n    values_to = \"value\",\n    `Total Nitrogen (mg/L)`:`Secchi depth (m)`)\nd\n\n# A tibble: 83,883 × 4\n   station SampleTime          indicator               value\n     &lt;dbl&gt; &lt;dttm&gt;              &lt;chr&gt;                   &lt;dbl&gt;\n 1       6 2023-12-19 10:01:00 Total Nitrogen (mg/L)   0.305\n 2       6 2023-12-19 10:01:00 Chlorophyll-a (ug/L)    2.1  \n 3       6 2023-12-19 10:01:00 Secchi depth (m)      NaN    \n 4       7 2023-12-19 10:12:00 Total Nitrogen (mg/L)   0.276\n 5       7 2023-12-19 10:12:00 Chlorophyll-a (ug/L)    3    \n 6       7 2023-12-19 10:12:00 Secchi depth (m)        2.5  \n 7       8 2023-12-19 12:39:00 Total Nitrogen (mg/L)   0.805\n 8       8 2023-12-19 12:39:00 Chlorophyll-a (ug/L)   52.7  \n 9       8 2023-12-19 12:39:00 Secchi depth (m)        0.7  \n10       9 2023-12-19 11:54:00 Total Nitrogen (mg/L)   0.354\n# ℹ 83,873 more rows\n\n\nWe additionally need to prepare data for the following elements:\n\nStations\nList of unique station numbers for selecting from a drop-down menu.\nIndicators\nList of unique indicators for selecting from a drop-down menu.\n\n\n# * data for select ----\nstations   &lt;- unique(d$station)\nindicators &lt;- unique(d$indicator)\n\nstations\n\n [1]  6  7  8  9 11 13 14 16 19 23 24 25 28 32 33 36 38 40 41 44 46 47 50 51 52\n[26] 55 60 63 64 65 66 67 68 70 71 73 80 81 82 84 90 91 92 93 95\n\nindicators\n\n[1] \"Total Nitrogen (mg/L)\" \"Chlorophyll-a (ug/L)\"  \"Secchi depth (m)\"     \n\n\n\n\n2.5.2 Add User Interface\nLet’s add dropdown menus for station and indicator selection and a placeholder for the plotly output. These outputs are htmlwidgets that allow additional interactivity. They will also be update based on user input.\n\n#  ui.R ----\nui &lt;- fluidPage(\n\n  # * layout ----\n  wellPanel(\n    h2(\"Water Quality\"),\n    \n    # * input widgets ----\n    selectInput(\"sel_sta\", \"Station\",   choices = stations),\n    selectInput(\"sel_ind\", \"Indicator\", choices = indicators),\n    \n    # * output htmlwidgets ----\n    plotlyOutput(\"tsplot\")\n  )\n\n)\n\nNotice that shiny::fluidPage() and shiny::wellPanel() functions are used for the layout. For more details, check out Shiny - Application layout guide. For even more advanced layout options, checkout shinydashboard and bslib R packages.\nNotice that plotly::plotlyOutput() is used to layout the htmlwidget. We need these components because we’ll be updating them interactively based on user input with server-side functions.\n\n\n2.5.3 Add Server functions\nLet’s add renderPlotly() to update the time series plot based on user inputs. The renderPlotly() function takes a plotly interactive plot object. We can use the plotly::ggplotly() function to take a static ggplot2 plot object and make it an interactive plotly object. Using ggplot2 allows us to take advantage of the Grammar of Graphics principles to render plots using a layered approach (see cheatsheet, summary or book).\nThe get_data() component allows us to generate a data frame reactive to user inputs and available for use across multiple server-side functions (although here we only use one). For more, see Shiny - Use reactive expressions.\n\n#  server.R ----\nserver &lt;- function(input, output, session) {\n\n  # * get_data(): reactive to inputs ----\n  get_data &lt;- reactive({\n    d |&gt;\n      filter(\n        station   == input$sel_sta,\n        indicator == input$sel_ind)\n  })\n\n  # * tsplot: time series plot ----\n  output$tsplot &lt;- renderPlotly({\n    g &lt;- ggplot(\n      get_data(),\n      aes(\n        x = SampleTime,\n        y = value) ) +\n      geom_line() +\n      labs(y = input$sel_ind)\n    ggplotly(g)\n  })\n}\n\n\n\n2.5.4 Final app\nNow with all the pieces, your app should work as intended. Try running it by placing shinyApp(ui, server) at the bottom of your file and sourcing the entire script. The finished product should look like this:\n\n# Goal: Create an app to show a time series by station and indicator\n#   includes map of selected station\n\n# global.R ----\n\n# * load libraries ----\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(tbeptools)\n\n# * prep data ----\nd &lt;- epcdata |&gt;\n  select(\n    station                 = epchc_station,\n    SampleTime,\n    lat                     = Latitude,\n    lon                     = Longitude,\n    `Total Nitrogen (mg/L)` = tn,\n    `Chlorophyll-a (ug/L)`  = chla,\n    `Secchi depth (m)`      = sd_m) |&gt;\n  pivot_longer(\n    names_to  = \"indicator\",\n    values_to = \"value\",\n    `Total Nitrogen (mg/L)`:`Secchi depth (m)`)\n\n# * data for select ----\nstations   &lt;- unique(d$station)\nindicators &lt;- unique(d$indicator)\n\n#  ui.R ----\nui &lt;- fluidPage(\n  wellPanel(\n    h2(\"Water Quality\"),\n    selectInput(\"sel_sta\", \"Station\",   choices = stations),\n    selectInput(\"sel_ind\", \"Indicator\", choices = indicators),\n    plotlyOutput(\"tsplot\")\n  )\n)\n\n#  server.R ----\nserver &lt;- function(input, output, session) {\n  \n  # * get_data(): reactive to inputs ----\n  get_data &lt;- reactive({\n    d |&gt;\n      filter(\n        station   == input$sel_sta,\n        indicator == input$sel_ind)\n  })\n  \n  # * tsplot: time series plot ----\n  output$tsplot &lt;- renderPlotly({\n    g &lt;- ggplot(\n      get_data(),\n      aes(\n        x = SampleTime,\n        y = value) ) +\n      geom_line() +\n      labs(y = input$sel_ind)\n    ggplotly(g)\n  })\n \n}\n\n# run ----\nshinyApp(ui, server)",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "fundamentals.html#a-dirty-trick",
    "href": "fundamentals.html#a-dirty-trick",
    "title": "2  Fundamentals",
    "section": "2.6 A dirty trick…",
    "text": "2.6 A dirty trick…\nMuch has changed in the programming world over the last few years. As you might expect, there are generative AI tools to help build and develop Shiny apps. The Shiny Assistant from Posit can be used in this capacity.\nIt works like any other generative AI tool, except it’s trained specifically to support Shiny develop AND has a built in feature for rendering generated apps directly in the browser. Here’s a prompt that shows how you could build an app similar to the one above that shows the tool the general structure of your data (i.e., str(epcdata)).\n\nThis is the app that it gave me, after substituting my input data.\n\n\nShow Code\nlibrary(shiny)\nlibrary(bslib)\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(tbeptools)\n\n# Create labels for parameters\nparam_labels &lt;- c(\n  \"tn\" = \"Total Nitrogen\",\n  \"chla\" = \"Chlorophyll-a\",\n  \"sd_m\" = \"Secchi Depth (m)\"\n)\n\nui &lt;- page_sidebar(\n  title = \"Time Series Explorer\",\n  sidebar = sidebar(\n    selectInput(\"station\", \"Select Station:\",\n                choices = sort(unique(epcdata$epchc_station))\n    ),\n    selectInput(\"parameter\", \"Select Parameter:\",\n                choices = setNames(names(param_labels), param_labels)\n    ),\n    hr(),\n    helpText(\"Select a station and parameter to view the time series plot.\")\n  ),\n  card(\n    card_header(\"Time Series Plot\"),\n    plotlyOutput(\"tsplot\")\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  \n  # Create the plot\n  output$tsplot &lt;- renderPlotly({\n    req(input$station, input$parameter)\n    \n    # Filter data\n    plot_data &lt;- epcdata %&gt;%\n      filter(epchc_station == input$station) %&gt;%\n      arrange(SampleTime)\n    \n    # Create plot\n    p &lt;- plot_ly(data = plot_data, \n                 x = ~SampleTime, \n                 y = as.formula(paste0(\"~\", input$parameter)),\n                 type = 'scatter',\n                 mode = 'lines+markers',\n                 name = param_labels[input$parameter]\n    ) %&gt;%\n      layout(\n        title = paste(\"Time Series for Station\", input$station),\n        xaxis = list(title = \"Date\"),\n        yaxis = list(title = param_labels[input$parameter])\n      )\n    \n    p\n  })\n}\n\nshinyApp(ui, server)\n\n\n\nA word of caution… just because you can doesn’t mean you should. Don’t use this as a crutch to a deeper understanding of Shiny. It’s a useful learning and troubleshooting tool, but it shouldn’t replace the conventional learning process to build personal knowledge of the tools.",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fundamentals</span>"
    ]
  },
  {
    "objectID": "deploy.html",
    "href": "deploy.html",
    "title": "3  Deployment and IT Hurdles",
    "section": "",
    "text": "text",
    "crumbs": [
      "Modules",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Deployment and IT Hurdles</span>"
    ]
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "Benthic Data\n\n\n\nTampa Bay\n\n\n\nA benthic data dashboard for Tampa Bay\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFL Water Quality Dash\n\n\n\nWater Quality\n\n\nTime Series\n\n\nflexdashboard\n\n\n\nDashboard for displaying basic water quality data in Florida.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLand Use Data\n\n\n\nTampa Bay\n\n\n\nA land use change dashboard for Tampa Bay\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNMS Climate Dashboard\n\n\n\nMBON\n\n\nClimate Change\n\n\nTime Series\n\n\n\nNOAA NMS Climate Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNekton Data\n\n\n\nTampa Bay\n\n\n\nA nekton data dashboard for Tampa Bay\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBIS Indicators\n\n\n\nMBON\n\n\nBiodiversity\n\n\nSpatial Mapping\n\n\n\nA library for mapping biodiversity using OBIS data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPiney Point Data\n\n\n\nTampa Bay\n\n\n\nA Piney Point dashboard for Tampa Bay\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRocky Intertidal Dashboard\n\n\n\nBiodiversity\n\n\nSpatial Mapping\n\n\nflexdashboard\n\n\n\nMBON Pole to Pole Biodiversity Dashboard.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScallop Data\n\n\n\nTampa Bay\n\n\n\nA scallop dashboard for Tampa Bay\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeagrass Data\n\n\n\nTampa Bay\n\n\nflexdashboard\n\n\n\nA seagrass transect dashboard for Tampa Bay\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeascapes for Sanctuaries\n\n\n\nMBON\n\n\nWater Quality\n\n\nTime Series\n\n\nSpatial Mapping\n\n\n\nSeascapes over time and space for US Sanctuaries\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidal Creek Data\n\n\n\nTampa Bay\n\n\nflexdashboard\n\n\n\nA tidal creek dashboard for Tampa Bay\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUseful Links\n\n\nAdditional resources for continued learning\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWater Quality\n\n\n\nTampa Bay\n\n\nWater Quality\n\n\nflexdashboard\n\n\n\nA water quality dashboard for Tampa Bay\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "resources/useful.html",
    "href": "resources/useful.html",
    "title": "Useful Links",
    "section": "",
    "text": "Quarto\nThe following is a non-exhaustive list of additional resources you can use for continued learning.",
    "crumbs": [
      "Resources",
      "Useful Links"
    ]
  },
  {
    "objectID": "resources/useful.html#quarto",
    "href": "resources/useful.html#quarto",
    "title": "Useful Links",
    "section": "",
    "text": "Official Quarto Website\nQuarto Reference Materials\nQuarto Cheatsheet\nLearning Quarto with RStudio\nOpenscapes Quarto Tutorial",
    "crumbs": [
      "Resources",
      "Useful Links"
    ]
  },
  {
    "objectID": "resources/useful.html#shiny",
    "href": "resources/useful.html#shiny",
    "title": "Useful Links",
    "section": "Shiny",
    "text": "Shiny\n\nOfficial Shiny Website\nLearning Shiny with RStudio\nMastering Shiny\nShiny Cheatsheet\nEngineering Production Grade Shiny Apps\nCERF 2023 Shiny workshop",
    "crumbs": [
      "Resources",
      "Useful Links"
    ]
  },
  {
    "objectID": "resources/useful.html#open-science-websites",
    "href": "resources/useful.html#open-science-websites",
    "title": "Useful Links",
    "section": "Open Science Websites",
    "text": "Open Science Websites\n\nNCEAS Open Science for Synthesis workshop\nNCEAS Reproducible Research Techniques\nOpen Science Foundation open science workshop\nOpenscapes\nOpenscapes Champions Lesson Series\nSupercharge your research: A 10 week plan for open data science\nROpenSci guidance on creating a Code of Conduct\nNOAA Reproducible Reporting with R\nPeerJ collection on practical data science",
    "crumbs": [
      "Resources",
      "Useful Links"
    ]
  },
  {
    "objectID": "resources/useful.html#data-management-tools",
    "href": "resources/useful.html#data-management-tools",
    "title": "Useful Links",
    "section": "Data Management Tools",
    "text": "Data Management Tools\n\nEnvironmental Data Initiative Data Management Resources\nUniversity of California DMPTool\nUS Geological Survey resources for Metadata Creation\nELIXIR and others Data Stewardship Wizard\nTBEP Data Management SOP",
    "crumbs": [
      "Resources",
      "Useful Links"
    ]
  },
  {
    "objectID": "resources/useful.html#tbep-r-trainings",
    "href": "resources/useful.html#tbep-r-trainings",
    "title": "Useful Links",
    "section": "TBEP R Trainings",
    "text": "TBEP R Trainings\n\nPeconic Estuary Program R training, recording\nTBEP June 2020 R training, recordings\nWriting functions in R\nR package development workflow\nA soft introduction to Shiny",
    "crumbs": [
      "Resources",
      "Useful Links"
    ]
  },
  {
    "objectID": "resources/useful.html#r-lessons-tutorials",
    "href": "resources/useful.html#r-lessons-tutorials",
    "title": "Useful Links",
    "section": "R Lessons & Tutorials",
    "text": "R Lessons & Tutorials\n\nSoftware Carpentry: R for Reproducible Scientific Analysis\nData Carpentry: Geospatial Workshop\nData Carpentry: R for Data Analysis and Visualization of Ecological Data\nData Carpentry: Data Organization in Spreadsheets\nR for Water Resources Data Science\nRStudio Webinars, many topics\nR For Cats: Basic introduction site, with cats!\nTopical cheatsheets from RStudio, also viewed from the help menu\nCheatsheet from CRAN of base R functions\nTotally awesome R-related artwork by Allison Horst\nColor reference PDF with text names, Color cheatsheet PDF from NCEAS",
    "crumbs": [
      "Resources",
      "Useful Links"
    ]
  },
  {
    "objectID": "resources/useful.html#r-ebookscourses",
    "href": "resources/useful.html#r-ebookscourses",
    "title": "Useful Links",
    "section": "R eBooks/Courses",
    "text": "R eBooks/Courses\n\nJenny Bryan’s Stat545.com\nGarrett Grolemund and Hadley Wickham’s R For Data Science\nChester Ismay and Albert Y. Kim’s Modern DiveR\nJulia Silge and David Robinson Text Mining with R\nHadley Wickham’s Advanced R\nHadley Wickham’s R for Data Science\nYihui Xie R Markdown: The Definitive Guide\nWinston Chang R Graphics Cookbook\nWegman et al. Remote Sensing and GIS for Ecologists: Using Open Source Software\nLovelace et al. Geocomputation with R\nEdszer Pebesma and Roger Bivand Spatial Data Science",
    "crumbs": [
      "Resources",
      "Useful Links"
    ]
  },
  {
    "objectID": "resources/useful.html#sec-github",
    "href": "resources/useful.html#sec-github",
    "title": "Useful Links",
    "section": "Git/Github",
    "text": "Git/Github\n\nJenny Bryan’s Happy Git and Github for the useR\nGit and GitHub for the Casual User\nCoding Club Intro to Github",
    "crumbs": [
      "Resources",
      "Useful Links"
    ]
  },
  {
    "objectID": "resources/tbepwq.html",
    "href": "resources/tbepwq.html",
    "title": "Water Quality",
    "section": "",
    "text": "Background\nThe water quality dashboard provides an in-depth view of water quality conditions in Tampa Bay, including a report card to assess annual trends by major bay segments. Additional features include an assessment of seasonal trends, site-level trends, and data downloads.",
    "crumbs": [
      "Resources",
      "Water Quality"
    ]
  },
  {
    "objectID": "resources/tbepwq.html#dashboard",
    "href": "resources/tbepwq.html#dashboard",
    "title": "Water Quality",
    "section": "Dashboard",
    "text": "Dashboard\nView the dashboard by visiting https://shiny.tbep.org/wq-dash",
    "crumbs": [
      "Resources",
      "Water Quality"
    ]
  },
  {
    "objectID": "resources/tbepsg.html",
    "href": "resources/tbepsg.html",
    "title": "Seagrass Data",
    "section": "",
    "text": "Background\nThe seagrass transect dashboard can be used to view results for the annual transect monitoring program in Tampa Bay. Data are available from the mid-1990s to present day. The dashboard provides summary information, results for individual transects, estimates of the seagrass edge, and data downloads.",
    "crumbs": [
      "Resources",
      "Seagrass Data"
    ]
  },
  {
    "objectID": "resources/tbepsg.html#dashboard",
    "href": "resources/tbepsg.html#dashboard",
    "title": "Seagrass Data",
    "section": "Dashboard",
    "text": "Dashboard\nView the dashboard by visiting https://shiny.tbep.org/seagrasstransect-dash",
    "crumbs": [
      "Resources",
      "Seagrass Data"
    ]
  },
  {
    "objectID": "resources/tbepbt.html",
    "href": "resources/tbepbt.html",
    "title": "Benthic Data",
    "section": "",
    "text": "Background\nThe benthic dashboard provides information on the biological health of the benthic communities in Tampa Bay and information on sediment contaminants. The benthic data are summarized using the Tampa Bay Benthic Index. Sediment data can be viewed for over 100 contaminants, including summary plots as PEL ratios.",
    "crumbs": [
      "Resources",
      "Benthic Data"
    ]
  },
  {
    "objectID": "resources/tbepbt.html#dashboard",
    "href": "resources/tbepbt.html#dashboard",
    "title": "Benthic Data",
    "section": "Dashboard",
    "text": "Dashboard\nView the dashboard by visiting https://shiny.tbep.org/benthic-dash",
    "crumbs": [
      "Resources",
      "Benthic Data"
    ]
  },
  {
    "objectID": "resources/tbeptc.html",
    "href": "resources/tbeptc.html",
    "title": "Tidal Creek Data",
    "section": "",
    "text": "Background\nTidal creeks or tributaries are essential habitats in the Tampa Bay estuary and serve as important focal points for understanding watershed inputs that affect water quality. This dashboard provides an interface to view and download results for all tidal creeks in the identified population of over 300 creeks in southwest Florida. A summary report card, individual creek indicators, and data downloads are available.",
    "crumbs": [
      "Resources",
      "Tidal Creek Data"
    ]
  },
  {
    "objectID": "resources/tbeptc.html#dashboard",
    "href": "resources/tbeptc.html#dashboard",
    "title": "Tidal Creek Data",
    "section": "Dashboard",
    "text": "Dashboard\nView the dashboard by visiting https://shiny.tbep.org/tidalcreek-dash",
    "crumbs": [
      "Resources",
      "Tidal Creek Data"
    ]
  },
  {
    "objectID": "resources/tbepnk.html",
    "href": "resources/tbepnk.html",
    "title": "Nekton Data",
    "section": "",
    "text": "Background\nNekton data describe fish and other swimming organisms that inhabitat an estuary. The Tampa Bay Nekton Index describes the condition of the nekton community as a single score from 0 - 100. The dashboard provides information on index scores by major bay segments and results for individual sample stations. Data downloads are also available.",
    "crumbs": [
      "Resources",
      "Nekton Data"
    ]
  },
  {
    "objectID": "resources/tbepnk.html#dashboard",
    "href": "resources/tbepnk.html#dashboard",
    "title": "Nekton Data",
    "section": "Dashboard",
    "text": "Dashboard\nView the dashboard by visiting https://shiny.tbep.org/nekton-dash",
    "crumbs": [
      "Resources",
      "Nekton Data"
    ]
  },
  {
    "objectID": "resources/tbeplu.html",
    "href": "resources/tbeplu.html",
    "title": "Land Use Data",
    "section": "",
    "text": "Background\nUpland, coastal, and subtidal habitats have changed dramatically in Tampa Bay and its watershed over the last several decades. This dashboard provides an overview of how these habitats have changed over time. Summaries are provided in simple tables and as change analysis plots that show shifts between habitat types. Data downloads are also available.",
    "crumbs": [
      "Resources",
      "Land Use Data"
    ]
  },
  {
    "objectID": "resources/tbeplu.html#dashboard",
    "href": "resources/tbeplu.html#dashboard",
    "title": "Land Use Data",
    "section": "Dashboard",
    "text": "Dashboard\nView the dashboard by visiting https://shiny.tbep.org/landuse-change",
    "crumbs": [
      "Resources",
      "Land Use Data"
    ]
  },
  {
    "objectID": "resources/tbeppp.html",
    "href": "resources/tbeppp.html",
    "title": "Piney Point Data",
    "section": "",
    "text": "Background\nPiney Point is a former fertilizer processing facility on the southeast shore of Tampa Bay. In March 2021, 215 million gallons of nutrient-rich wastewater from Piney Point were discharged to Tampa Bay. This dashboard provides a summary of the response-based monitoring data collected in 2021 to assess the effects of this large nutrient influx on the bay’s resources.",
    "crumbs": [
      "Resources",
      "Piney Point Data"
    ]
  },
  {
    "objectID": "resources/tbeppp.html#dashboard",
    "href": "resources/tbeppp.html#dashboard",
    "title": "Piney Point Data",
    "section": "Dashboard",
    "text": "Dashboard\nView the dashboard by visiting https://shiny.tbep.org/piney-point",
    "crumbs": [
      "Resources",
      "Piney Point Data"
    ]
  },
  {
    "objectID": "resources/tbepsc.html",
    "href": "resources/tbepsc.html",
    "title": "Scallop Data",
    "section": "",
    "text": "Background\nThe Scallop Data dashboard provides a summary of participatory science efforts to monitor the scallop population in Tampa Bay. The dashboard is dynamic and created using RMarkdown (Quarto predecessor). It does not include any server components as required by interactive Shiny dashboards.",
    "crumbs": [
      "Resources",
      "Scallop Data"
    ]
  },
  {
    "objectID": "resources/tbepsc.html#dashboard",
    "href": "resources/tbepsc.html#dashboard",
    "title": "Scallop Data",
    "section": "Dashboard",
    "text": "Dashboard\nView the dashboard by visiting https://tbep-tech.github.io/scallop-search/",
    "crumbs": [
      "Resources",
      "Scallop Data"
    ]
  },
  {
    "objectID": "resources/fl_wq_dash.html",
    "href": "resources/fl_wq_dash.html",
    "title": "FL Water Quality Dash",
    "section": "",
    "text": "Background\nData and decision support tools for assessing water quality in Florida.",
    "crumbs": [
      "Resources",
      "FL Water Quality Dash"
    ]
  },
  {
    "objectID": "resources/fl_wq_dash.html#docs",
    "href": "resources/fl_wq_dash.html#docs",
    "title": "FL Water Quality Dash",
    "section": "Docs",
    "text": "Docs\nView the dashboard at 7yl4r.shinyapps.io/wq-dash\n\n\n\nscreenshot",
    "crumbs": [
      "Resources",
      "FL Water Quality Dash"
    ]
  },
  {
    "objectID": "resources/nms_climate_dash.html",
    "href": "resources/nms_climate_dash.html",
    "title": "NMS Climate Dashboard",
    "section": "",
    "text": "Background\nDashboard of climate indicators across NOAA National Marine Sanctuaries.",
    "crumbs": [
      "Resources",
      "NMS Climate Dashboard"
    ]
  },
  {
    "objectID": "resources/nms_climate_dash.html#docs",
    "href": "resources/nms_climate_dash.html#docs",
    "title": "NMS Climate Dashboard",
    "section": "Docs",
    "text": "Docs\nView the docs at noaa-onms.github.io/climate-dashboard/\n\n\n\nscreenshot",
    "crumbs": [
      "Resources",
      "NMS Climate Dashboard"
    ]
  },
  {
    "objectID": "resources/obisindicators.html",
    "href": "resources/obisindicators.html",
    "title": "OBIS Indicators",
    "section": "",
    "text": "Background\nR package for generating indicators from OBIS",
    "crumbs": [
      "Resources",
      "OBIS Indicators"
    ]
  },
  {
    "objectID": "resources/obisindicators.html#docs",
    "href": "resources/obisindicators.html#docs",
    "title": "OBIS Indicators",
    "section": "Docs",
    "text": "Docs\nView the docs at marinebon.github.io/obisindicators/\n\n\n\nexample_es50_map",
    "crumbs": [
      "Resources",
      "OBIS Indicators"
    ]
  },
  {
    "objectID": "resources/rocky_shore_dash.html",
    "href": "resources/rocky_shore_dash.html",
    "title": "Rocky Intertidal Dashboard",
    "section": "",
    "text": "Background\nData visualization dashboard of biodiversity monitoring observations from rocky intertidal habitats.",
    "crumbs": [
      "Resources",
      "Rocky Intertidal Dashboard"
    ]
  },
  {
    "objectID": "resources/rocky_shore_dash.html#docs",
    "href": "resources/rocky_shore_dash.html#docs",
    "title": "Rocky Intertidal Dashboard",
    "section": "Docs",
    "text": "Docs\nView the dashboard in this Github repository\n\n\n\nscreenshot",
    "crumbs": [
      "Resources",
      "Rocky Intertidal Dashboard"
    ]
  },
  {
    "objectID": "resources/seascapes.html",
    "href": "resources/seascapes.html",
    "title": "Seascapes for Sanctuaries",
    "section": "",
    "text": "Background\nSeascapes are a dynamic sea water classification product derived from satellite imagery by Maria Kavanaugh et al.\nThe source code of the Shiny app makes use of custom data wrangling functions in the R package seascapeR and the following htmlwidgets for interactive visualization:",
    "crumbs": [
      "Resources",
      "Seascapes for Sanctuaries"
    ]
  },
  {
    "objectID": "resources/seascapes.html#background",
    "href": "resources/seascapes.html#background",
    "title": "Seascapes for Sanctuaries",
    "section": "",
    "text": "map: leaflet\ntime series: dygraphs",
    "crumbs": [
      "Resources",
      "Seascapes for Sanctuaries"
    ]
  },
  {
    "objectID": "resources/seascapes.html#docs",
    "href": "resources/seascapes.html#docs",
    "title": "Seascapes for Sanctuaries",
    "section": "Docs",
    "text": "Docs\nView the dashboard at shiny.marinebon.app/seascapes.\n\nThe different Seascape Classes are based on a combination of variables derived from clustering.",
    "crumbs": [
      "Resources",
      "Seascapes for Sanctuaries"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Appendix A — Setup for the workshop",
    "section": "",
    "text": "A.1 Posit Cloud\nThanks for your interest in the R Shiny workshop. You can participate during the worskhop in two ways. First, you can use an RStudio project setup on Posit Cloud (preferred) or you can use your own version of R and RStudio on your laptop. The instructions below describe setup for each.\nPlease reach out if you have any issues with installation: mbeck@tbep.org\nPosit Cloud provides an environment to use RStudio through a web browser. It’s useful as a workshop resource because necessary packages and scripts are already included. After the workshop, you’ll want to continue work with R and RStudio installed on your own computer.\nWe’ve created a workspace on Posit Cloud that includes all of the content for this workshop. Open the following URL in a web browser: https://posit.cloud/content/9569756\nYou will see a login screen that looks like this:\nSign up using a personal login or existing account (Google, GitHub, etc.).\nYou’ll see the workspace in your browser once you’ve signed in. You’ll need to make a permanent copy to save your work. Just click the button at the top marked “+ Save as Permanent Copy”. When this is done, the red text at the top indicating “TEMPORARY COPY” will no longer be visible.\nNow you can follow along with the workshop content.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Setup for the workshop</span>"
    ]
  },
  {
    "objectID": "setup.html#sec-rstudio",
    "href": "setup.html#sec-rstudio",
    "title": "Appendix A — Setup for the workshop",
    "section": "A.2 Install R and RStudio",
    "text": "A.2 Install R and RStudio\nYou can also use R and RStudio on your local computer for this workshop. Posit Cloud is setup as a convenience and you will want to work locally with R after the workshop.\nMost of the steps below will require administrative privileges on a computer. Work with your IT staff to complete the setup if you do not have these privileges. As an alternative, you can use Posit Cloud to participate (see Section A.1), although we strongly encourage you to install the software on your personal computer for use after the workshop.\nR and RStudio are separate downloads and installations. R is the underlying statistical computing software. RStudio is a graphical integrated development environment (IDE) that makes using R much easier and more interactive. You need to install R before you install RStudio.\nThanks to the USGS-R Training group and Data Carpentry for making their installation materials available. The following instructions come directly from their materials, with a few minor edits to help you get set up.\n\nA.2.1 Windows: Download and install R\nGo to CRAN and download the R installer for Windows. Make sure to choose the latest stable version (v4.2.3 as of April 2023).\nOnce the installer downloads, Right-click on it and select “Run as administrator”.\nType in your credentials and click yes (or if you don’t have administrator access have your IT rep install with Admin privileges).\n\nYou can click next through the standard dialogs and accept most defaults. But at the destination screen, please verify that it is installing it to C:\\Program Files\\R\n\nAt the “Select Components” screen, you can accept the default and install both 32-bit and 64-bit versions.\n\nAt this screen, uncheck ‘Create a desktop icon’ because non-admin users in Windows will be unable to delete it.\n\n\n\nA.2.2 Windows: Download and install RStudio\nDownload RStudio from here.\nAfter download, double-click the installer. It will ask for your administrator credentials to install (you might need to have your IT rep install again).\nAccept all the default options for the RStudio install.\n\n\n\nA.2.3 macOS: Download and install R\n\nDownload and install R from the CRAN website for Mac here.\nSelect the .pkg file for the latest R version\nDouble click on the downloaded file to install R\nIt is also a good idea to install XQuartz (needed by some packages)\n\n\n\nA.2.4 macOS: Download and install RStudio\n\nGo to the RStudio download page\nUnder Installers select the appropriate RStudio download file for macOS\nDouble click the file to install RStudio\n\n\n\nA.2.5 Check Install\nOnce installed, RStudio should be accessible from the start menu. Start up RStudio. Once running it should look something like this:",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Setup for the workshop</span>"
    ]
  },
  {
    "objectID": "setup.html#sec-setshi",
    "href": "setup.html#sec-setshi",
    "title": "Appendix A — Setup for the workshop",
    "section": "A.3 Setup shinyapps.io",
    "text": "A.3 Setup shinyapps.io\nThe shinyapps.io website is a service provided by Posit for hosting Shiny applications online. A free option is available, with additional paid tiers depending on your needs. Although there are other free options, this website is the easiest and quickest way to host a Shiny application.\nFirst, navigate to shinyapps.io and click the “Sign Up” button. After you’ve setup your GitHub account, you can sign up for shinyapps.io by selecting the GitHub sign up option.\n\nNext, install the rsconnect package in R. This package lets you connect to shinyapps.io and push applications from your local computer.\n\ninstall.packages(\"rsconnect\")\n\nYou need to obtain an access token from shinyapps.io to configure the rsconnect package to use your account. In your shinyapps.io dashboard, click your user name on the top right and select Tokens.\n\nAdd a new token, copy/paste the command to setup your account info, and execute it in the R console. It will look something like this and there will a button that allows you to copy the command to your clipboard, where &lt;TOKEN&gt; and &lt;SECRET&gt; are specific to your account and should not be shared.\n\nrsconnect::setAccountInfo(name='beckmw',\n              token='&lt;TOKEN&gt;',\n              secret='&lt;SECRET&gt;')\n\nNow you will be able to push a Shiny application to your shinyapps.io account as follows.\n\nlibrary(rsconnect)\ndeployApp()\n\nMore info can be found here.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Setup for the workshop</span>"
    ]
  },
  {
    "objectID": "rintro.html",
    "href": "rintro.html",
    "title": "Appendix B — Introduction to R",
    "section": "",
    "text": "B.1 RStudio\nRStudio is the go-to Interactive Development Environment (IDE) for R. Rstudio includes many features to improve the user’s experience.\nLet’s get familiar with RStudio.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "rintro.html#rstudio",
    "href": "rintro.html#rstudio",
    "title": "Appendix B — Introduction to R",
    "section": "",
    "text": "B.1.1 Open R and RStudio\nFind the RStudio shortcut on your computer and fire it up. You should see something like this:\n\nThere are four panes in RStudio:\n\nSource: Your primary window for writing code to send to the console, this is where you write and save R “scripts”\nConsole: This is where code is executed in R\nEnvironment, History, etc.: A tabbed window showing your working environment, code execution history, and other useful things\nFiles, plots, etc.: A tabbed window showing a file explorer, a plot window, list of installed packages, help files, and viewer\n\n\n\nB.1.2 Scripting\nIn most cases, you will not enter and execute code directly in the console. Code can be written in a script and then sent directly to the console.\nOpen a new script from the File menu…\n\n\n\nB.1.3 Executing code in RStudio\nAfter you write code in an R script, it can be sent to the Console to run the code. There are two ways to do this. First, you can hit the Run button at the top right of the scripting window. Second, you can use ctrl+enter (cmd+enter on a Mac). Either option will run the line(s) of script that are selected.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "rintro.html#r-language-fundamentals",
    "href": "rintro.html#r-language-fundamentals",
    "title": "Appendix B — Introduction to R",
    "section": "B.2 R language fundamentals",
    "text": "B.2 R language fundamentals\nR is built around functions. The basic syntax of a function follows the form: function_name(arg1, arg2, ...).\nWith the base install, you will gain access to many functions (2356, to be exact). Some examples:\n\n# print\nprint(\"hello world!\")\n\n[1] \"hello world!\"\n\n# sequence\nseq(1, 10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n# random numbers\nrnorm(100, mean = 10, sd = 2)\n\n  [1] 12.135555 11.736625 13.677050 10.687401 13.358804 12.794374  8.174614\n  [8] 11.579333 10.953273  9.252075  9.173367  9.353987  9.783276 11.169092\n [15] 11.417760  7.731530  7.465206  9.762407  8.950895 10.483446  7.276211\n [22]  9.532080 12.173733 11.565517 13.065339 12.128499 10.165507  9.407016\n [29] 10.822457  7.829454  9.406313 10.872755  8.227931  9.619924  7.658792\n [36]  9.493482  9.958431  7.499068  9.540987 11.575206  8.333532 12.494024\n [43]  9.378321  8.478584  9.094076  8.574111  8.538218 14.527076  8.486061\n [50] 12.128140  7.992725  8.630950  9.679677 11.828534  8.786108  6.235714\n [57]  9.999667  8.626114 11.296817 10.661610  8.728491  8.823886  9.403566\n [64] 11.367771 11.672726  6.872524  6.715351 10.503702  8.077750  7.512458\n [71] 12.733912  5.196908 11.362516  8.802033  5.252102  7.626117  9.807871\n [78]  7.688488  7.382295  7.182272  7.215200 11.010629 10.557486  8.067207\n [85]  8.538903 11.558157 14.045216  6.737943 10.211516 10.579251  9.435167\n [92] 10.733393  7.796427  6.115615 11.834624  8.396630 12.436347 11.110306\n [99] 10.533750  8.700070\n\n# average \nmean(rnorm(100))\n\n[1] -0.1412118\n\n# sum\nsum(rnorm(100))\n\n[1] 12.00875\n\n\nVery often you will see functions used like this:\n\nmy_random_sum &lt;- sum(rnorm(100))\n\nThe first part of the line is the name of an object that you make up. The second bit, &lt;-, is the assignment operator. This tells R to take the result of sum(rnorm(100)) and store it in an object named, my_random_sum. It is stored in the environment and can be used by just executing it’s name in the console.\n\nmy_random_sum\n\n[1] -3.380777\n\n\n\nB.2.1 What is the environment?\nThere are two outcomes when you run code. First, the code will simply print output directly in the console. Second, there is no output because you have stored it as a variable using &lt;-. Output that is stored is saved in the environment. The environment is the collection of named objects that are stored in memory for your current R session.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "rintro.html#packages",
    "href": "rintro.html#packages",
    "title": "Appendix B — Introduction to R",
    "section": "B.3 Packages",
    "text": "B.3 Packages\nThe base installation of R is quite powerful. Packages allow you to include new methods for use in R.\n\nB.3.1 CRAN\nMany packages are available on CRAN, The Comprehensive R Archive Network. This is where you download R and also where most will gain access to packages. As of 2025-01-31, there are 21966 packages on CRAN!\n\n\nB.3.2 Installing packages\nWhen a package gets installed, that means the source code is downloaded and put into your library. A default library location is set for you.\nWe use the install.packages() function to download and install a package. Here, we install the readxl package, used below, which is used to upload data from and Excel file.\n\ninstall.packages(\"readxl\")\n\nYou should see some text in the R console showing progress of the installation and a prompt after installation is done.\nAfter installation, you can load a package using the library() function. This makes all functions in a package available for you to use.\n\nlibrary(readxl)\n\nAn important aspect of packages is that you only need to download them once, but every time you start RStudio you need to load them with the library() function.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "rintro.html#data-structures-in-r",
    "href": "rintro.html#data-structures-in-r",
    "title": "Appendix B — Introduction to R",
    "section": "B.4 Data structures in R",
    "text": "B.4 Data structures in R\nNow we can talk about R data structures. Simply put, a data structure is a way for programming languages to handle information storage.\n\nB.4.1 Vectors (one-dimensional data)\nThe basic data format in R is a vector - a one-dimensional grouping of elements that have the same type. These are all vectors and they are created with the c (concatenate) function:\n\ndbl_var &lt;- c(1, 2.5, 4.5)\nint_var &lt;- c(1L, 6L, 10L)\nlog_var &lt;- c(TRUE, FALSE, T, F)\nchr_var &lt;- c(\"a\", \"b\", \"c\")\n\nThe four types of vectors are double (or numeric), integer, logical, and character. The following functions can return useful information about the vectors:\n\nclass(dbl_var)\n\n[1] \"numeric\"\n\nlength(log_var)\n\n[1] 4\n\n\n\n\nB.4.2 Data frames (two-dimensional data)\nA collection of vectors represented as one data object are often described as two-dimensional data, like a spreadsheet, or in R speak, a data frame. Here’s a simple example:\n\nltrs &lt;- c(\"a\", \"b\", \"c\")\nnums &lt;- c(1, 2, 3)\nlogs &lt;- c(T, F, T)\nmydf &lt;- data.frame(ltrs, nums, logs)\nmydf\n\n  ltrs nums  logs\n1    a    1  TRUE\n2    b    2 FALSE\n3    c    3  TRUE\n\n\nThe only constraints required to make a data frame are:\n\nEach column (vector) contains the same type of data\nThe number of observations in each column is equal.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "rintro.html#getting-your-data-into-r",
    "href": "rintro.html#getting-your-data-into-r",
    "title": "Appendix B — Introduction to R",
    "section": "B.5 Getting your data into R",
    "text": "B.5 Getting your data into R\nIt is the rare case when you manually enter your data in R. Most data analysis workflows typically begin with importing a dataset from an external source. We’ll be using read_excel() function from the readxl package.\nWe can import the ExampleSites.xlsx dataset as follows. Note the use of a relative file path. You can see what R is using as your “working directory” using the getwd() function.\n\nsitdat &lt;- read_excel(\"data/ExampleSites.xlsx\")\n\nLet’s explore the dataset a bit.\n\n# get the dimensions\ndim(sitdat)\n\n[1] 11  5\n\n# get the column names\nnames(sitdat)\n\n[1] \"Monitoring Location ID\"        \"Monitoring Location Name\"     \n[3] \"Monitoring Location Latitude\"  \"Monitoring Location Longitude\"\n[5] \"Location Group\"               \n\n# see the first six rows\nhead(sitdat)\n\n# A tibble: 6 × 5\n  `Monitoring Location ID` `Monitoring Location Name` Monitoring Location Lati…¹\n  &lt;chr&gt;                    &lt;chr&gt;                                           &lt;dbl&gt;\n1 ABT-026                  Rte 2, Concord                                   42.5\n2 ABT-062                  Rte 62, Acton                                    42.4\n3 ABT-077                  Rte 27/USGS, Maynard                             42.4\n4 ABT-144                  Rte 62, Stow                                     42.4\n5 ABT-237                  Robin Hill Rd, Marlboro                          42.3\n6 ABT-301                  Rte 9, Westboro                                  42.3\n# ℹ abbreviated name: ¹​`Monitoring Location Latitude`\n# ℹ 2 more variables: `Monitoring Location Longitude` &lt;dbl&gt;,\n#   `Location Group` &lt;chr&gt;\n\n# get the overall structure\nstr(sitdat)\n\ntibble [11 × 5] (S3: tbl_df/tbl/data.frame)\n $ Monitoring Location ID       : chr [1:11] \"ABT-026\" \"ABT-062\" \"ABT-077\" \"ABT-144\" ...\n $ Monitoring Location Name     : chr [1:11] \"Rte 2, Concord\" \"Rte 62, Acton\" \"Rte 27/USGS, Maynard\" \"Rte 62, Stow\" ...\n $ Monitoring Location Latitude : num [1:11] 42.5 42.4 42.4 42.4 42.3 ...\n $ Monitoring Location Longitude: num [1:11] -71.4 -71.4 -71.4 -71.5 -71.6 ...\n $ Location Group               : chr [1:11] \"Assabet\" \"Assabet\" \"Assabet\" \"Assabet\" ...\n\n\nYou can also view a dataset in a spreadsheet style using the View() function:\n\nView(sitdat)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  },
  {
    "objectID": "rintro.html#summary",
    "href": "rintro.html#summary",
    "title": "Appendix B — Introduction to R",
    "section": "B.6 Summary",
    "text": "B.6 Summary\nIn this intro we learned about R and Rstudio, some of the basic syntax and data structures in R, and how to import files. You’ll be able to follow the rest of the workshop with this knowledge.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Introduction to R</span>"
    ]
  }
]